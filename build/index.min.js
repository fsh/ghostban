/**
   * @license
   * author: BAI TIANLIANG
   * ghostban.js v3.0.0-alpha.29
   * Released under the MIT license.
   */
var ghostban=function(t){"use strict";var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},e(t,r)};function r(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}var n=function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};function o(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a}function i(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}"function"==typeof SuppressedError&&SuppressedError;var a="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function u(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function c(t){if(t.__esModule)return t;var e=t.default;if("function"==typeof e){var r=function t(){if(this instanceof t){var r=[null];return r.push.apply(r,arguments),new(Function.bind.apply(e,r))}return e.apply(this,arguments)};r.prototype=e.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(t).forEach((function(e){var n=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,n.get?n:{enumerable:!0,get:function(){return t[e]}})})),r}var f,l,s=function t(e,r){var n,o,i=r.length;return i>=2?(n=r.slice(0,i/2),o=r.slice(i/2,i),function(t,e,r){for(var n=[],o=e.length,i=r.length;o>0&&i>0;)t(e[0],r[0])<=0?(n.push(e.shift()),o--):(n.push(r.shift()),i--);return o>0?n.push.apply(n,e):n.push.apply(n,r),n}(e,t(e,n),t(e,o))):r.slice()};f=s,l=function(t,e,r){var n,o;for(n=0,o=e.length;n<o&&!(t(e[n],r)>0);n++);return n};var p=function(){var t;function e(t){return function(){return t}}function r(t){t=t||{},this.config=t,this.config.childrenPropertyName=t.childrenPropertyName||"children",this.config.modelComparatorFn=t.modelComparatorFn}function n(t,e){return e.parent=t,t.children.push(e),e}function o(t,e){this.config=t,this.model=e,this.children=[]}function i(t){return"function"==typeof t.config.modelComparatorFn}function a(t,e,r){var n;if(!(e instanceof o))throw new TypeError("Child must be of type Node.");if(e.parent=t,t.model[t.config.childrenPropertyName]instanceof Array||(t.model[t.config.childrenPropertyName]=[]),i(t))n=l(t.config.modelComparatorFn,t.model[t.config.childrenPropertyName],e.model),t.model[t.config.childrenPropertyName].splice(n,0,e.model),t.children.splice(n,0,e);else if(void 0===r)t.model[t.config.childrenPropertyName].push(e.model),t.children.push(e);else{if(r<0||r>t.children.length)throw new Error("Invalid index.");t.model[t.config.childrenPropertyName].splice(r,0,e.model),t.children.splice(r,0,e)}return e}function u(){var e={};if(1===arguments.length?"function"==typeof arguments[0]?e.fn=arguments[0]:e.options=arguments[0]:2===arguments.length?"function"==typeof arguments[0]?(e.fn=arguments[0],e.ctx=arguments[1]):(e.options=arguments[0],e.fn=arguments[1]):(e.options=arguments[0],e.fn=arguments[1],e.ctx=arguments[2]),e.options=e.options||{},e.options.strategy||(e.options.strategy="pre"),!t[e.options.strategy])throw new Error("Unknown tree walk strategy. Valid strategies are 'pre' [default], 'post' and 'breadth'.");return e}return t={},r.prototype.parse=function(t){var e,r,i;if(!(t instanceof Object))throw new TypeError("Model must be of type object.");if(i=new o(this.config,t),t[this.config.childrenPropertyName]instanceof Array)for(this.config.modelComparatorFn&&(t[this.config.childrenPropertyName]=f(this.config.modelComparatorFn,t[this.config.childrenPropertyName])),e=0,r=t[this.config.childrenPropertyName].length;e<r;e++)n(i,this.parse(t[this.config.childrenPropertyName][e]));return i},o.prototype.isRoot=function(){return void 0===this.parent},o.prototype.hasChildren=function(){return this.children.length>0},o.prototype.addChild=function(t){return a(this,t)},o.prototype.addChildAtIndex=function(t,e){if(i(this))throw new Error("Cannot add child at index when using a comparator function.");return a(this,t,e)},o.prototype.setIndex=function(t){if(i(this))throw new Error("Cannot set node index when using a comparator function.");if(this.isRoot()){if(0===t)return this;throw new Error("Invalid index.")}if(t<0||t>=this.parent.children.length)throw new Error("Invalid index.");var e=this.parent.children.indexOf(this);return this.parent.children.splice(t,0,this.parent.children.splice(e,1)[0]),this.parent.model[this.parent.config.childrenPropertyName].splice(t,0,this.parent.model[this.parent.config.childrenPropertyName].splice(e,1)[0]),this},o.prototype.getPath=function(){var t=[];return function e(r){t.unshift(r),r.isRoot()||e(r.parent)}(this),t},o.prototype.getIndex=function(){return this.isRoot()?0:this.parent.children.indexOf(this)},o.prototype.walk=function(){var e;e=u.apply(this,arguments),t[e.options.strategy].call(this,e.fn,e.ctx)},t.pre=function t(e,r){var n,o,i;for(i=e.call(r,this),n=0,o=this.children.length;n<o;n++){if(!1===i)return!1;i=t.call(this.children[n],e,r)}return i},t.post=function t(e,r){var n,o;for(n=0,o=this.children.length;n<o;n++)if(!1===t.call(this.children[n],e,r))return!1;return e.call(r,this)},t.breadth=function(t,e){var r=[this];!function n(){var o,i,a;if(0!==r.length){for(o=0,i=(a=r.shift()).children.length;o<i;o++)r.push(a.children[o]);!1!==t.call(e,a)&&n()}}()},o.prototype.all=function(){var r,n=[];return(r=u.apply(this,arguments)).fn=r.fn||e(!0),t[r.options.strategy].call(this,(function(t){r.fn.call(r.ctx,t)&&n.push(t)}),r.ctx),n},o.prototype.first=function(){var r,n;return(r=u.apply(this,arguments)).fn=r.fn||e(!0),t[r.options.strategy].call(this,(function(t){if(r.fn.call(r.ctx,t))return n=t,!1}),r.ctx),n},o.prototype.drop=function(){var t;return this.isRoot()||(t=this.parent.children.indexOf(this),this.parent.children.splice(t,1),this.parent.model[this.config.childrenPropertyName].splice(t,1),this.parent=void 0,delete this.parent),this},r}(),y=u(p),h="object"==typeof global&&global&&global.Object===Object&&global,d="object"==typeof self&&self&&self.Object===Object&&self,g=h||d||Function("return this")(),v=g.Symbol,b=Object.prototype,m=b.hasOwnProperty,w=b.toString,S=v?v.toStringTag:void 0;var j=Object.prototype.toString;var A="[object Null]",P="[object Undefined]",O=v?v.toStringTag:void 0;function _(t){return null==t?void 0===t?P:A:O&&O in Object(t)?function(t){var e=m.call(t,S),r=t[S];try{t[S]=void 0;var n=!0}catch(t){}var o=w.call(t);return n&&(e?t[S]=r:delete t[S]),o}(t):function(t){return j.call(t)}(t)}function x(t){return null!=t&&"object"==typeof t}var R="[object Symbol]";function E(t){return"symbol"==typeof t||x(t)&&_(t)==R}var T=Array.isArray,I=1/0,M=v?v.prototype:void 0,C=M?M.toString:void 0;function k(t){if("string"==typeof t)return t;if(T(t))return function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}(t,k)+"";if(E(t))return C?C.call(t):"";var e=t+"";return"0"==e&&1/t==-I?"-0":e}var B=/\s/;var N=/^\s+/;function F(t){return t?t.slice(0,function(t){for(var e=t.length;e--&&B.test(t.charAt(e)););return e}(t)+1).replace(N,""):t}function D(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}var U=NaN,L=/^[-+]0x[0-9a-f]+$/i,W=/^0b[01]+$/i,$=/^0o[0-7]+$/i,G=parseInt;var z=1/0,V=17976931348623157e292;function H(t){return t?(t=function(t){if("number"==typeof t)return t;if(E(t))return U;if(D(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=D(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=F(t);var r=W.test(t);return r||$.test(t)?G(t.slice(2),r?2:8):L.test(t)?U:+t}(t))===z||t===-z?(t<0?-1:1)*V:t==t?t:0:0===t?t:0}function q(t){var e=H(t),r=e%1;return e==e?r?e-r:e:0}function K(t){return t}var J="[object AsyncFunction]",Z="[object Function]",X="[object GeneratorFunction]",Y="[object Proxy]";function Q(t){if(!D(t))return!1;var e=_(t);return e==Z||e==X||e==J||e==Y}var tt,et=g["__core-js_shared__"],rt=(tt=/[^.]+$/.exec(et&&et.keys&&et.keys.IE_PROTO||""))?"Symbol(src)_1."+tt:"";var nt=Function.prototype.toString;function ot(t){if(null!=t){try{return nt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}var it=/^\[object .+?Constructor\]$/,at=Function.prototype,ut=Object.prototype,ct=at.toString,ft=ut.hasOwnProperty,lt=RegExp("^"+ct.call(ft).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function st(t){return!(!D(t)||(e=t,rt&&rt in e))&&(Q(t)?lt:it).test(ot(t));var e}function pt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return st(r)?r:void 0}var yt=pt(g,"WeakMap"),ht=Object.create,dt=function(){function t(){}return function(e){if(!D(e))return{};if(ht)return ht(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}(),gt=dt;var vt=function(){try{var t=pt(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),bt=vt;var mt=9007199254740991,wt=/^(?:0|[1-9]\d*)$/;function St(t,e){var r=typeof t;return!!(e=null==e?mt:e)&&("number"==r||"symbol"!=r&&wt.test(t))&&t>-1&&t%1==0&&t<e}function jt(t,e,r){"__proto__"==e&&bt?bt(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function At(t,e){return t===e||t!=t&&e!=e}var Pt=Object.prototype.hasOwnProperty;function Ot(t,e,r){var n=t[e];Pt.call(t,e)&&At(n,r)&&(void 0!==r||e in t)||jt(t,e,r)}function _t(t,e,r,n){var o=!r;r||(r={});for(var i=-1,a=e.length;++i<a;){var u=e[i],c=n?n(r[u],t[u],u,r,t):void 0;void 0===c&&(c=t[u]),o?jt(r,u,c):Ot(r,u,c)}return r}var xt=9007199254740991;function Rt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=xt}function Et(t){return null!=t&&Rt(t.length)&&!Q(t)}var Tt=Object.prototype;function It(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Tt)}function Mt(t){return x(t)&&"[object Arguments]"==_(t)}var Ct=Object.prototype,kt=Ct.hasOwnProperty,Bt=Ct.propertyIsEnumerable,Nt=Mt(function(){return arguments}())?Mt:function(t){return x(t)&&kt.call(t,"callee")&&!Bt.call(t,"callee")},Ft=Nt;var Dt="object"==typeof t&&t&&!t.nodeType&&t,Ut=Dt&&"object"==typeof module&&module&&!module.nodeType&&module,Lt=Ut&&Ut.exports===Dt?g.Buffer:void 0,Wt=(Lt?Lt.isBuffer:void 0)||function(){return!1},$t={};function Gt(t){return function(e){return t(e)}}$t["[object Float32Array]"]=$t["[object Float64Array]"]=$t["[object Int8Array]"]=$t["[object Int16Array]"]=$t["[object Int32Array]"]=$t["[object Uint8Array]"]=$t["[object Uint8ClampedArray]"]=$t["[object Uint16Array]"]=$t["[object Uint32Array]"]=!0,$t["[object Arguments]"]=$t["[object Array]"]=$t["[object ArrayBuffer]"]=$t["[object Boolean]"]=$t["[object DataView]"]=$t["[object Date]"]=$t["[object Error]"]=$t["[object Function]"]=$t["[object Map]"]=$t["[object Number]"]=$t["[object Object]"]=$t["[object RegExp]"]=$t["[object Set]"]=$t["[object String]"]=$t["[object WeakMap]"]=!1;var zt="object"==typeof t&&t&&!t.nodeType&&t,Vt=zt&&"object"==typeof module&&module&&!module.nodeType&&module,Ht=Vt&&Vt.exports===zt&&h.process,qt=function(){try{var t=Vt&&Vt.require&&Vt.require("util").types;return t||Ht&&Ht.binding&&Ht.binding("util")}catch(t){}}(),Kt=qt&&qt.isTypedArray,Jt=Kt?Gt(Kt):function(t){return x(t)&&Rt(t.length)&&!!$t[_(t)]},Zt=Object.prototype.hasOwnProperty;function Xt(t,e){var r=T(t),n=!r&&Ft(t),o=!r&&!n&&Wt(t),i=!r&&!n&&!o&&Jt(t),a=r||n||o||i,u=a?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],c=u.length;for(var f in t)!e&&!Zt.call(t,f)||a&&("length"==f||o&&("offset"==f||"parent"==f)||i&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||St(f,c))||u.push(f);return u}function Yt(t,e){return function(r){return t(e(r))}}var Qt=Yt(Object.keys,Object),te=Object.prototype.hasOwnProperty;function ee(t){return Et(t)?Xt(t):function(t){if(!It(t))return Qt(t);var e=[];for(var r in Object(t))te.call(t,r)&&"constructor"!=r&&e.push(r);return e}(t)}var re=Object.prototype.hasOwnProperty;function ne(t){if(!D(t))return function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}(t);var e=It(t),r=[];for(var n in t)("constructor"!=n||!e&&re.call(t,n))&&r.push(n);return r}function oe(t){return Et(t)?Xt(t,!0):ne(t)}var ie=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ae=/^\w*$/;function ue(t,e){if(T(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!E(t))||(ae.test(t)||!ie.test(t)||null!=e&&t in Object(e))}var ce=pt(Object,"create");var fe=Object.prototype.hasOwnProperty;var le=Object.prototype.hasOwnProperty;function se(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function pe(t,e){for(var r=t.length;r--;)if(At(t[r][0],e))return r;return-1}se.prototype.clear=function(){this.__data__=ce?ce(null):{},this.size=0},se.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},se.prototype.get=function(t){var e=this.__data__;if(ce){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return fe.call(e,t)?e[t]:void 0},se.prototype.has=function(t){var e=this.__data__;return ce?void 0!==e[t]:le.call(e,t)},se.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=ce&&void 0===e?"__lodash_hash_undefined__":e,this};var ye=Array.prototype.splice;function he(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}he.prototype.clear=function(){this.__data__=[],this.size=0},he.prototype.delete=function(t){var e=this.__data__,r=pe(e,t);return!(r<0)&&(r==e.length-1?e.pop():ye.call(e,r,1),--this.size,!0)},he.prototype.get=function(t){var e=this.__data__,r=pe(e,t);return r<0?void 0:e[r][1]},he.prototype.has=function(t){return pe(this.__data__,t)>-1},he.prototype.set=function(t,e){var r=this.__data__,n=pe(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};var de=pt(g,"Map");function ge(t,e){var r,n,o=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof e?"string":"hash"]:o.map}function ve(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}ve.prototype.clear=function(){this.size=0,this.__data__={hash:new se,map:new(de||he),string:new se}},ve.prototype.delete=function(t){var e=ge(this,t).delete(t);return this.size-=e?1:0,e},ve.prototype.get=function(t){return ge(this,t).get(t)},ve.prototype.has=function(t){return ge(this,t).has(t)},ve.prototype.set=function(t,e){var r=ge(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};var be="Expected a function";function me(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(be);var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=t.apply(this,n);return r.cache=i.set(o,a)||i,a};return r.cache=new(me.Cache||ve),r}me.Cache=ve;var we,Se,je,Ae=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Pe=/\\(\\)?/g,Oe=(we=function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Ae,(function(t,r,n,o){e.push(n?o.replace(Pe,"$1"):r||t)})),e},Se=me(we,(function(t){return 500===je.size&&je.clear(),t})),je=Se.cache,Se),_e=Oe;function xe(t){return null==t?"":k(t)}function Re(t,e){return T(t)?t:ue(t,e)?[t]:_e(xe(t))}var Ee=1/0;function Te(t){if("string"==typeof t||E(t))return t;var e=t+"";return"0"==e&&1/t==-Ee?"-0":e}function Ie(t,e){for(var r=0,n=(e=Re(e,t)).length;null!=t&&r<n;)t=t[Te(e[r++])];return r&&r==n?t:void 0}function Me(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}var Ce=v?v.isConcatSpreadable:void 0;function ke(t){return T(t)||Ft(t)||!!(Ce&&t&&t[Ce])}function Be(t,e,r,n,o){var i=-1,a=t.length;for(r||(r=ke),o||(o=[]);++i<a;){var u=t[i];e>0&&r(u)?e>1?Be(u,e-1,r,n,o):Me(o,u):n||(o[o.length]=u)}return o}var Ne=Yt(Object.getPrototypeOf,Object);function Fe(t,e,r){var n=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var i=Array(o);++n<o;)i[n]=t[n+e];return i}var De=Math.ceil,Ue=Math.max;function Le(t){var e=this.__data__=new he(t);this.size=e.size}Le.prototype.clear=function(){this.__data__=new he,this.size=0},Le.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},Le.prototype.get=function(t){return this.__data__.get(t)},Le.prototype.has=function(t){return this.__data__.has(t)},Le.prototype.set=function(t,e){var r=this.__data__;if(r instanceof he){var n=r.__data__;if(!de||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new ve(n)}return r.set(t,e),this.size=r.size,this};var We="object"==typeof t&&t&&!t.nodeType&&t,$e=We&&"object"==typeof module&&module&&!module.nodeType&&module,Ge=$e&&$e.exports===We?g.Buffer:void 0,ze=Ge?Ge.allocUnsafe:void 0;function Ve(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var a=t[r];e(a,r,t)&&(i[o++]=a)}return i}function He(){return[]}var qe=Object.prototype.propertyIsEnumerable,Ke=Object.getOwnPropertySymbols,Je=Ke?function(t){return null==t?[]:(t=Object(t),Ve(Ke(t),(function(e){return qe.call(t,e)})))}:He;var Ze=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)Me(e,Je(t)),t=Ne(t);return e}:He,Xe=Ze;function Ye(t,e,r){var n=e(t);return T(t)?n:Me(n,r(t))}function Qe(t){return Ye(t,ee,Je)}function tr(t){return Ye(t,oe,Xe)}var er=pt(g,"DataView"),rr=pt(g,"Promise"),nr=pt(g,"Set"),or="[object Map]",ir="[object Promise]",ar="[object Set]",ur="[object WeakMap]",cr="[object DataView]",fr=ot(er),lr=ot(de),sr=ot(rr),pr=ot(nr),yr=ot(yt),hr=_;(er&&hr(new er(new ArrayBuffer(1)))!=cr||de&&hr(new de)!=or||rr&&hr(rr.resolve())!=ir||nr&&hr(new nr)!=ar||yt&&hr(new yt)!=ur)&&(hr=function(t){var e=_(t),r="[object Object]"==e?t.constructor:void 0,n=r?ot(r):"";if(n)switch(n){case fr:return cr;case lr:return or;case sr:return ir;case pr:return ar;case yr:return ur}return e});var dr=hr,gr=Object.prototype.hasOwnProperty;var vr=g.Uint8Array;function br(t){var e=new t.constructor(t.byteLength);return new vr(e).set(new vr(t)),e}var mr=/\w*$/;var wr=v?v.prototype:void 0,Sr=wr?wr.valueOf:void 0;var jr="[object Boolean]",Ar="[object Date]",Pr="[object Map]",Or="[object Number]",_r="[object RegExp]",xr="[object Set]",Rr="[object String]",Er="[object Symbol]",Tr="[object ArrayBuffer]",Ir="[object DataView]",Mr="[object Float32Array]",Cr="[object Float64Array]",kr="[object Int8Array]",Br="[object Int16Array]",Nr="[object Int32Array]",Fr="[object Uint8Array]",Dr="[object Uint8ClampedArray]",Ur="[object Uint16Array]",Lr="[object Uint32Array]";function Wr(t,e,r){var n,o=t.constructor;switch(e){case Tr:return br(t);case jr:case Ar:return new o(+t);case Ir:return function(t,e){var r=e?br(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case Mr:case Cr:case kr:case Br:case Nr:case Fr:case Dr:case Ur:case Lr:return function(t,e){var r=e?br(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}(t,r);case Pr:return new o;case Or:case Rr:return new o(t);case _r:return function(t){var e=new t.constructor(t.source,mr.exec(t));return e.lastIndex=t.lastIndex,e}(t);case xr:return new o;case Er:return n=t,Sr?Object(Sr.call(n)):{}}}var $r=qt&&qt.isMap,Gr=$r?Gt($r):function(t){return x(t)&&"[object Map]"==dr(t)};var zr=qt&&qt.isSet,Vr=zr?Gt(zr):function(t){return x(t)&&"[object Set]"==dr(t)},Hr=1,qr=2,Kr=4,Jr="[object Arguments]",Zr="[object Function]",Xr="[object GeneratorFunction]",Yr="[object Object]",Qr={};function tn(t,e,r,n,o,i){var a,u=e&Hr,c=e&qr,f=e&Kr;if(r&&(a=o?r(t,n,o,i):r(t)),void 0!==a)return a;if(!D(t))return t;var l=T(t);if(l){if(a=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&gr.call(t,"index")&&(r.index=t.index,r.input=t.input),r}(t),!u)return function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}(t,a)}else{var s=dr(t),p=s==Zr||s==Xr;if(Wt(t))return function(t,e){if(e)return t.slice();var r=t.length,n=ze?ze(r):new t.constructor(r);return t.copy(n),n}(t,u);if(s==Yr||s==Jr||p&&!o){if(a=c||p?{}:function(t){return"function"!=typeof t.constructor||It(t)?{}:gt(Ne(t))}(t),!u)return c?function(t,e){return _t(t,Xe(t),e)}(t,function(t,e){return t&&_t(e,oe(e),t)}(a,t)):function(t,e){return _t(t,Je(t),e)}(t,function(t,e){return t&&_t(e,ee(e),t)}(a,t))}else{if(!Qr[s])return o?t:{};a=Wr(t,s,u)}}i||(i=new Le);var y=i.get(t);if(y)return y;i.set(t,a),Vr(t)?t.forEach((function(n){a.add(tn(n,e,r,n,t,i))})):Gr(t)&&t.forEach((function(n,o){a.set(o,tn(n,e,r,o,t,i))}));var h=l?void 0:(f?c?tr:Qe:c?oe:ee)(t);return function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););}(h||t,(function(n,o){h&&(n=t[o=n]),Ot(a,o,tn(n,e,r,o,t,i))})),a}Qr[Jr]=Qr["[object Array]"]=Qr["[object ArrayBuffer]"]=Qr["[object DataView]"]=Qr["[object Boolean]"]=Qr["[object Date]"]=Qr["[object Float32Array]"]=Qr["[object Float64Array]"]=Qr["[object Int8Array]"]=Qr["[object Int16Array]"]=Qr["[object Int32Array]"]=Qr["[object Map]"]=Qr["[object Number]"]=Qr[Yr]=Qr["[object RegExp]"]=Qr["[object Set]"]=Qr["[object String]"]=Qr["[object Symbol]"]=Qr["[object Uint8Array]"]=Qr["[object Uint8ClampedArray]"]=Qr["[object Uint16Array]"]=Qr["[object Uint32Array]"]=!0,Qr["[object Error]"]=Qr[Zr]=Qr["[object WeakMap]"]=!1;function en(t){return tn(t,4)}var rn=1,nn=4;function on(t){return tn(t,rn|nn)}function an(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new ve;++e<r;)this.add(t[e])}function un(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function cn(t,e){return t.has(e)}an.prototype.add=an.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},an.prototype.has=function(t){return this.__data__.has(t)};var fn=1,ln=2;function sn(t,e,r,n,o,i){var a=r&fn,u=t.length,c=e.length;if(u!=c&&!(a&&c>u))return!1;var f=i.get(t),l=i.get(e);if(f&&l)return f==e&&l==t;var s=-1,p=!0,y=r&ln?new an:void 0;for(i.set(t,e),i.set(e,t);++s<u;){var h=t[s],d=e[s];if(n)var g=a?n(d,h,s,e,t,i):n(h,d,s,t,e,i);if(void 0!==g){if(g)continue;p=!1;break}if(y){if(!un(e,(function(t,e){if(!cn(y,e)&&(h===t||o(h,t,r,n,i)))return y.push(e)}))){p=!1;break}}else if(h!==d&&!o(h,d,r,n,i)){p=!1;break}}return i.delete(t),i.delete(e),p}function pn(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function yn(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var hn=1,dn=2,gn="[object Boolean]",vn="[object Date]",bn="[object Error]",mn="[object Map]",wn="[object Number]",Sn="[object RegExp]",jn="[object Set]",An="[object String]",Pn="[object Symbol]",On="[object ArrayBuffer]",_n="[object DataView]",xn=v?v.prototype:void 0,Rn=xn?xn.valueOf:void 0;var En=1,Tn=Object.prototype.hasOwnProperty;var In=1,Mn="[object Arguments]",Cn="[object Array]",kn="[object Object]",Bn=Object.prototype.hasOwnProperty;function Nn(t,e,r,n,o,i){var a=T(t),u=T(e),c=a?Cn:dr(t),f=u?Cn:dr(e),l=(c=c==Mn?kn:c)==kn,s=(f=f==Mn?kn:f)==kn,p=c==f;if(p&&Wt(t)){if(!Wt(e))return!1;a=!0,l=!1}if(p&&!l)return i||(i=new Le),a||Jt(t)?sn(t,e,r,n,o,i):function(t,e,r,n,o,i,a){switch(r){case _n:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case On:return!(t.byteLength!=e.byteLength||!i(new vr(t),new vr(e)));case gn:case vn:case wn:return At(+t,+e);case bn:return t.name==e.name&&t.message==e.message;case Sn:case An:return t==e+"";case mn:var u=pn;case jn:var c=n&hn;if(u||(u=yn),t.size!=e.size&&!c)return!1;var f=a.get(t);if(f)return f==e;n|=dn,a.set(t,e);var l=sn(u(t),u(e),n,o,i,a);return a.delete(t),l;case Pn:if(Rn)return Rn.call(t)==Rn.call(e)}return!1}(t,e,c,r,n,o,i);if(!(r&In)){var y=l&&Bn.call(t,"__wrapped__"),h=s&&Bn.call(e,"__wrapped__");if(y||h){var d=y?t.value():t,g=h?e.value():e;return i||(i=new Le),o(d,g,r,n,i)}}return!!p&&(i||(i=new Le),function(t,e,r,n,o,i){var a=r&En,u=Qe(t),c=u.length;if(c!=Qe(e).length&&!a)return!1;for(var f=c;f--;){var l=u[f];if(!(a?l in e:Tn.call(e,l)))return!1}var s=i.get(t),p=i.get(e);if(s&&p)return s==e&&p==t;var y=!0;i.set(t,e),i.set(e,t);for(var h=a;++f<c;){var d=t[l=u[f]],g=e[l];if(n)var v=a?n(g,d,l,e,t,i):n(d,g,l,t,e,i);if(!(void 0===v?d===g||o(d,g,r,n,i):v)){y=!1;break}h||(h="constructor"==l)}if(y&&!h){var b=t.constructor,m=e.constructor;b==m||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof m&&m instanceof m||(y=!1)}return i.delete(t),i.delete(e),y}(t,e,r,n,o,i))}function Fn(t,e,r,n,o){return t===e||(null==t||null==e||!x(t)&&!x(e)?t!=t&&e!=e:Nn(t,e,r,n,Fn,o))}var Dn=1,Un=2;function Ln(t){return t==t&&!D(t)}function Wn(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}function $n(t){var e=function(t){for(var e=ee(t),r=e.length;r--;){var n=e[r],o=t[n];e[r]=[n,o,Ln(o)]}return e}(t);return 1==e.length&&e[0][2]?Wn(e[0][0],e[0][1]):function(r){return r===t||function(t,e,r,n){var o=r.length,i=o,a=!n;if(null==t)return!i;for(t=Object(t);o--;){var u=r[o];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<i;){var c=(u=r[o])[0],f=t[c],l=u[1];if(a&&u[2]){if(void 0===f&&!(c in t))return!1}else{var s=new Le;if(n)var p=n(f,l,c,t,e,s);if(!(void 0===p?Fn(l,f,Dn|Un,n,s):p))return!1}}return!0}(r,t,e)}}function Gn(t,e){return null!=t&&e in Object(t)}function zn(t,e){return null!=t&&function(t,e,r){for(var n=-1,o=(e=Re(e,t)).length,i=!1;++n<o;){var a=Te(e[n]);if(!(i=null!=t&&r(t,a)))break;t=t[a]}return i||++n!=o?i:!!(o=null==t?0:t.length)&&Rt(o)&&St(a,o)&&(T(t)||Ft(t))}(t,e,Gn)}var Vn=1,Hn=2;function qn(t,e){return ue(t)&&Ln(e)?Wn(Te(t),e):function(r){var n=function(t,e,r){var n=null==t?void 0:Ie(t,e);return void 0===n?r:n}(r,t);return void 0===n&&n===e?zn(r,t):Fn(e,n,Vn|Hn)}}function Kn(t){return ue(t)?(e=Te(t),function(t){return null==t?void 0:t[e]}):function(t){return function(e){return Ie(e,t)}}(t);var e}function Jn(t){return"function"==typeof t?t:null==t?K:"object"==typeof t?T(t)?qn(t[0],t[1]):$n(t):Kn(t)}var Zn,Xn=function(t,e,r){for(var n=-1,o=Object(t),i=r(t),a=i.length;a--;){var u=i[Zn?a:++n];if(!1===e(o[u],u,o))break}return t};var Yn=function(t,e){return function(r,n){if(null==r)return r;if(!Et(r))return t(r,n);for(var o=r.length,i=e?o:-1,a=Object(r);(e?i--:++i<o)&&!1!==n(a[i],i,a););return r}}((function(t,e){return t&&Xn(t,e,ee)})),Qn=Yn;function to(t,e){var r=[];return Qn(t,(function(t,n,o){e(t,n,o)&&r.push(t)})),r}var eo,ro,no,oo,io,ao,uo=Math.max,co=Math.min;function fo(t,e){return(null==t?0:t.length)?Be(t,e=void 0===e?1:q(e)):[]}t.Ki=void 0,(eo=t.Ki||(t.Ki={}))[eo.Black=1]="Black",eo[eo.White=-1]="White",eo[eo.Empty=0]="Empty",t.Theme=void 0,(ro=t.Theme||(t.Theme={})).BlackAndWhite="black-and-white",ro.Flat="flat",ro.Subdued="subdued",ro.ShellStone="shell",ro.SlateAndShell="slate-and-shell",ro.Walnut="walnut",ro.Photorealistic="photorealistic",t.Center=void 0,(no=t.Center||(t.Center={})).TopRight="tr",no.TopLeft="tl",no.BottomLeft="bl",no.BottomRight="br",no.Center="c",t.Markup=void 0,(oo=t.Markup||(t.Markup={})).Current="cu",oo.Circle="ci",oo.Square="sq",oo.Triangle="tri",oo.Cross="cr",oo.Number="num",oo.Letter="le",oo.None="",t.ProblemAnswerType=void 0,(io=t.ProblemAnswerType||(t.ProblemAnswerType={})).Right="1",io.Wrong="2",io.Variant="3";var lo,so="https://s.shaowq.com",po=["A","B","C","D","E","F","G","H","J","K","L","M","N","O","P","Q","R","S","T"],yo=[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],ho=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"],go=function(t,e,r){e=(r?function(t,e,r){if(!D(r))return!1;var n=typeof e;return!!("number"==n?Et(r)&&St(e,r.length):"string"==n&&e in r)&&At(r[e],t)}(t,e,r):void 0===e)?1:Ue(q(e),0);var n=null==t?0:t.length;if(!n||e<1)return[];for(var o=0,i=0,a=Array(De(n/e));o<n;)a[i++]=Fe(t,o,o+=e);return a}(new Array(361).fill(0),19),vo={boardSize:19,padding:15,extend:2,interactive:!0,coordinate:!0,theme:t.Theme.Flat,background:!1,zoom:!0},bo=((ao={})[t.Theme.BlackAndWhite]={blacks:[],whites:[]},ao[t.Theme.Subdued]={board:"".concat(so,"/assets/theme/subdued/board.png"),blacks:["".concat(so,"/assets/theme/subdued/black.png")],whites:["".concat(so,"/assets/theme/subdued/white.png")]},ao[t.Theme.ShellStone]={board:"".concat(so,"/assets/theme/shell-stone/board.png"),blacks:["".concat(so,"/assets/theme/shell-stone/black.png")],whites:["".concat(so,"/assets/theme/shell-stone/white0.png"),"".concat(so,"/assets/theme/shell-stone/white1.png"),"".concat(so,"/assets/theme/shell-stone/white2.png"),"".concat(so,"/assets/theme/shell-stone/white3.png"),"".concat(so,"/assets/theme/shell-stone/white4.png")]},ao[t.Theme.SlateAndShell]={board:"".concat(so,"/assets/theme/slate-and-shell/board.png"),blacks:["".concat(so,"/assets/theme/slate-and-shell/slate1.png"),"".concat(so,"/assets/theme/slate-and-shell/slate2.png"),"".concat(so,"/assets/theme/slate-and-shell/slate3.png"),"".concat(so,"/assets/theme/slate-and-shell/slate4.png"),"".concat(so,"/assets/theme/slate-and-shell/slate5.png")],whites:["".concat(so,"/assets/theme/slate-and-shell/shell1.png"),"".concat(so,"/assets/theme/slate-and-shell/shell2.png"),"".concat(so,"/assets/theme/slate-and-shell/shell3.png"),"".concat(so,"/assets/theme/slate-and-shell/shell4.png"),"".concat(so,"/assets/theme/slate-and-shell/shell5.png")]},ao[t.Theme.Walnut]={board:"".concat(so,"/assets/theme/walnut/board.jpg"),blacks:["".concat(so,"/assets/theme/walnut/black.png")],whites:["".concat(so,"/assets/theme/walnut/white.png")]},ao[t.Theme.Photorealistic]={board:"".concat(so,"/assets/theme/photorealistic/board.png"),blacks:["".concat(so,"/assets/theme/photorealistic/black.png")],whites:["".concat(so,"/assets/theme/photorealistic/white.png")]},ao[t.Theme.Flat]={blacks:[],whites:[]},ao),mo={exports:{}},wo=Array.prototype.slice,So=Object.prototype.toString,jo=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==So.call(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,n=wo.call(arguments,1),o=Math.max(0,e.length-n.length),i=[],a=0;a<o;a++)i.push("$"+a);if(r=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof r){var o=e.apply(this,n.concat(wo.call(arguments)));return Object(o)===o?o:this}return e.apply(t,n.concat(wo.call(arguments)))})),e.prototype){var u=function(){};u.prototype=e.prototype,r.prototype=new u,u.prototype=null}return r},Ao=Function.prototype.bind||jo,Po=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0},Oo="undefined"!=typeof Symbol&&Symbol,_o=Po,xo=function(){return"function"==typeof Oo&&("function"==typeof Symbol&&("symbol"==typeof Oo("foo")&&("symbol"==typeof Symbol("bar")&&_o())))},Ro={foo:{}},Eo=Object,To=function(){return{__proto__:Ro}.foo===Ro.foo&&!({__proto__:null}instanceof Eo)},Io=Ao.call(Function.call,Object.prototype.hasOwnProperty),Mo=SyntaxError,Co=Function,ko=TypeError,Bo=function(t){try{return Co('"use strict"; return ('+t+").constructor;")()}catch(t){}},No=Object.getOwnPropertyDescriptor;if(No)try{No({},"")}catch(t){No=null}var Fo=function(){throw new ko},Do=No?function(){try{return Fo}catch(t){try{return No(arguments,"callee").get}catch(t){return Fo}}}():Fo,Uo=xo(),Lo=To(),Wo=Object.getPrototypeOf||(Lo?function(t){return t.__proto__}:null),$o={},Go="undefined"!=typeof Uint8Array&&Wo?Wo(Uint8Array):lo,zo={"%AggregateError%":"undefined"==typeof AggregateError?lo:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?lo:ArrayBuffer,"%ArrayIteratorPrototype%":Uo&&Wo?Wo([][Symbol.iterator]()):lo,"%AsyncFromSyncIteratorPrototype%":lo,"%AsyncFunction%":$o,"%AsyncGenerator%":$o,"%AsyncGeneratorFunction%":$o,"%AsyncIteratorPrototype%":$o,"%Atomics%":"undefined"==typeof Atomics?lo:Atomics,"%BigInt%":"undefined"==typeof BigInt?lo:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?lo:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?lo:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?lo:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?lo:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?lo:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?lo:FinalizationRegistry,"%Function%":Co,"%GeneratorFunction%":$o,"%Int8Array%":"undefined"==typeof Int8Array?lo:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?lo:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?lo:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":Uo&&Wo?Wo(Wo([][Symbol.iterator]())):lo,"%JSON%":"object"==typeof JSON?JSON:lo,"%Map%":"undefined"==typeof Map?lo:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&Uo&&Wo?Wo((new Map)[Symbol.iterator]()):lo,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?lo:Promise,"%Proxy%":"undefined"==typeof Proxy?lo:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?lo:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?lo:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&Uo&&Wo?Wo((new Set)[Symbol.iterator]()):lo,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?lo:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":Uo&&Wo?Wo(""[Symbol.iterator]()):lo,"%Symbol%":Uo?Symbol:lo,"%SyntaxError%":Mo,"%ThrowTypeError%":Do,"%TypedArray%":Go,"%TypeError%":ko,"%Uint8Array%":"undefined"==typeof Uint8Array?lo:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?lo:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?lo:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?lo:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?lo:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?lo:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?lo:WeakSet};if(Wo)try{null.error}catch(t){var Vo=Wo(Wo(t));zo["%Error.prototype%"]=Vo}var Ho=function t(e){var r;if("%AsyncFunction%"===e)r=Bo("async function () {}");else if("%GeneratorFunction%"===e)r=Bo("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=Bo("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&Wo&&(r=Wo(o.prototype))}return zo[e]=r,r},qo={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Ko=Ao,Jo=Io,Zo=Ko.call(Function.call,Array.prototype.concat),Xo=Ko.call(Function.apply,Array.prototype.splice),Yo=Ko.call(Function.call,String.prototype.replace),Qo=Ko.call(Function.call,String.prototype.slice),ti=Ko.call(Function.call,RegExp.prototype.exec),ei=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,ri=/\\(\\)?/g,ni=function(t,e){var r,n=t;if(Jo(qo,n)&&(n="%"+(r=qo[n])[0]+"%"),Jo(zo,n)){var o=zo[n];if(o===$o&&(o=Ho(n)),void 0===o&&!e)throw new ko("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new Mo("intrinsic "+t+" does not exist!")},oi=function(t,e){if("string"!=typeof t||0===t.length)throw new ko("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new ko('"allowMissing" argument must be a boolean');if(null===ti(/^%?[^%]*%?$/,t))throw new Mo("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=Qo(t,0,1),r=Qo(t,-1);if("%"===e&&"%"!==r)throw new Mo("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new Mo("invalid intrinsic syntax, expected opening `%`");var n=[];return Yo(t,ei,(function(t,e,r,o){n[n.length]=r?Yo(o,ri,"$1"):e||t})),n}(t),n=r.length>0?r[0]:"",o=ni("%"+n+"%",e),i=o.name,a=o.value,u=!1,c=o.alias;c&&(n=c[0],Xo(r,Zo([0,1],c)));for(var f=1,l=!0;f<r.length;f+=1){var s=r[f],p=Qo(s,0,1),y=Qo(s,-1);if(('"'===p||"'"===p||"`"===p||'"'===y||"'"===y||"`"===y)&&p!==y)throw new Mo("property names with quotes must have matching quotes");if("constructor"!==s&&l||(u=!0),Jo(zo,i="%"+(n+="."+s)+"%"))a=zo[i];else if(null!=a){if(!(s in a)){if(!e)throw new ko("base intrinsic for "+t+" exists, but the property is not available.");return}if(No&&f+1>=r.length){var h=No(a,s);a=(l=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:a[s]}else l=Jo(a,s),a=a[s];l&&!u&&(zo[i]=a)}}return a};!function(t){var e=Ao,r=oi,n=r("%Function.prototype.apply%"),o=r("%Function.prototype.call%"),i=r("%Reflect.apply%",!0)||e.call(o,n),a=r("%Object.getOwnPropertyDescriptor%",!0),u=r("%Object.defineProperty%",!0),c=r("%Math.max%");if(u)try{u({},"a",{value:1})}catch(t){u=null}t.exports=function(t){var r=i(e,o,arguments);a&&u&&(a(r,"length").configurable&&u(r,"length",{value:1+c(0,t.length-(arguments.length-1))}));return r};var f=function(){return i(e,n,arguments)};u?u(t.exports,"apply",{value:f}):t.exports.apply=f}(mo);var ii,ai,ui=mo.exports,ci=Object.prototype.toString,fi=function(t){var e=ci.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===ci.call(t.callee)),r};var li=Array.prototype.slice,si=fi,pi=Object.keys,yi=pi?function(t){return pi(t)}:function(){if(ai)return ii;var t;if(ai=1,!Object.keys){var e=Object.prototype.hasOwnProperty,r=Object.prototype.toString,n=fi,o=Object.prototype.propertyIsEnumerable,i=!o.call({toString:null},"toString"),a=o.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],c=function(t){var e=t.constructor;return e&&e.prototype===t},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},l=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!f["$"+t]&&e.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{c(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();t=function(t){var o=null!==t&&"object"==typeof t,f="[object Function]"===r.call(t),s=n(t),p=o&&"[object String]"===r.call(t),y=[];if(!o&&!f&&!s)throw new TypeError("Object.keys called on a non-object");var h=a&&f;if(p&&t.length>0&&!e.call(t,0))for(var d=0;d<t.length;++d)y.push(String(d));if(s&&t.length>0)for(var g=0;g<t.length;++g)y.push(String(g));else for(var v in t)h&&"prototype"===v||!e.call(t,v)||y.push(String(v));if(i)for(var b=function(t){if("undefined"==typeof window||!l)return c(t);try{return c(t)}catch(t){return!1}}(t),m=0;m<u.length;++m)b&&"constructor"===u[m]||!e.call(t,u[m])||y.push(u[m]);return y}}return ii=t}(),hi=Object.keys;yi.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return si(t)?hi(li.call(t)):hi(t)})}else Object.keys=yi;return Object.keys||yi};var di=yi,gi=oi("%Object.defineProperty%",!0),vi=function(){if(gi)try{return gi({},"a",{value:1}),!0}catch(t){return!1}return!1};vi.hasArrayLengthDefineBug=function(){if(!vi())return null;try{return 1!==gi([],"length",{value:1}).length}catch(t){return!0}};var bi=vi,mi=di,wi="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),Si=Object.prototype.toString,ji=Array.prototype.concat,Ai=Object.defineProperty,Pi=bi(),Oi=Ai&&Pi,_i=function(t,e,r,n){if(e in t)if(!0===n){if(t[e]===r)return}else if("function"!=typeof(o=n)||"[object Function]"!==Si.call(o)||!n())return;var o;Oi?Ai(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r},xi=function(t,e){var r=arguments.length>2?arguments[2]:{},n=mi(e);wi&&(n=ji.call(n,Object.getOwnPropertySymbols(e)));for(var o=0;o<n.length;o+=1)_i(t,n[o],e[n[o]],r[n[o]])};xi.supportsDescriptors=!!Oi;var Ri,Ei,Ti,Ii,Mi=xi,Ci=oi,ki=ui,Bi=ki(Ci("String.prototype.indexOf")),Ni=function(t,e){var r=Ci(t,!!e);return"function"==typeof r&&Bi(t,".prototype.")>-1?ki(r):r};function Fi(){if(Ei)return Ri;Ei=1;var t=oi("%Array%"),e=!t.isArray&&Ni("Object.prototype.toString");return Ri=t.isArray||function(t){return"[object Array]"===e(t)}}function Di(){return Ii?Ti:(Ii=1,Ti=Fi())}var Ui,Li,Wi,$i,Gi,zi,Vi,Hi,qi=oi,Ki=Ni,Ji=qi("%TypeError%"),Zi=Di(),Xi=qi("%Reflect.apply%",!0)||Ki("Function.prototype.apply"),Yi=function(t,e){var r=arguments.length>2?arguments[2]:[];if(!Zi(r))throw new Ji("Assertion failed: optional `argumentsList`, if provided, must be a List");return Xi(t,e,r)},Qi=c(Object.freeze({__proto__:null,default:{}}));function ta(){if(Li)return Ui;Li=1;var t="function"==typeof Map&&Map.prototype,e=Object.getOwnPropertyDescriptor&&t?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,r=t&&e&&"function"==typeof e.get?e.get:null,n=t&&Map.prototype.forEach,o="function"==typeof Set&&Set.prototype,i=Object.getOwnPropertyDescriptor&&o?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,a=o&&i&&"function"==typeof i.get?i.get:null,u=o&&Set.prototype.forEach,c="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,l="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,s=Boolean.prototype.valueOf,p=Object.prototype.toString,y=Function.prototype.toString,h=String.prototype.match,d=String.prototype.slice,g=String.prototype.replace,v=String.prototype.toUpperCase,b=String.prototype.toLowerCase,m=RegExp.prototype.test,w=Array.prototype.concat,S=Array.prototype.join,j=Array.prototype.slice,A=Math.floor,P="function"==typeof BigInt?BigInt.prototype.valueOf:null,O=Object.getOwnPropertySymbols,_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,x="function"==typeof Symbol&&"object"==typeof Symbol.iterator,R="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===x||"symbol")?Symbol.toStringTag:null,E=Object.prototype.propertyIsEnumerable,T=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(t){return t.__proto__}:null);function I(t,e){if(t===1/0||t===-1/0||t!=t||t&&t>-1e3&&t<1e3||m.call(/e/,e))return e;var r=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof t){var n=t<0?-A(-t):A(t);if(n!==t){var o=String(n),i=d.call(e,o.length+1);return g.call(o,r,"$&_")+"."+g.call(g.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return g.call(e,r,"$&_")}var M=Qi,C=M.custom,k=U(C)?C:null;function B(t,e,r){var n="double"===(r.quoteStyle||e)?'"':"'";return n+t+n}function N(t){return g.call(String(t),/"/g,"&quot;")}function F(t){return!("[object Array]"!==$(t)||R&&"object"==typeof t&&R in t)}function D(t){return!("[object RegExp]"!==$(t)||R&&"object"==typeof t&&R in t)}function U(t){if(x)return t&&"object"==typeof t&&t instanceof Symbol;if("symbol"==typeof t)return!0;if(!t||"object"!=typeof t||!_)return!1;try{return _.call(t),!0}catch(t){}return!1}Ui=function t(e,o,i,p){var v=o||{};if(W(v,"quoteStyle")&&"single"!==v.quoteStyle&&"double"!==v.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(W(v,"maxStringLength")&&("number"==typeof v.maxStringLength?v.maxStringLength<0&&v.maxStringLength!==1/0:null!==v.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var m=!W(v,"customInspect")||v.customInspect;if("boolean"!=typeof m&&"symbol"!==m)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(W(v,"indent")&&null!==v.indent&&"\t"!==v.indent&&!(parseInt(v.indent,10)===v.indent&&v.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(W(v,"numericSeparator")&&"boolean"!=typeof v.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var A=v.numericSeparator;if(void 0===e)return"undefined";if(null===e)return"null";if("boolean"==typeof e)return e?"true":"false";if("string"==typeof e)return z(e,v);if("number"==typeof e){if(0===e)return 1/0/e>0?"0":"-0";var O=String(e);return A?I(e,O):O}if("bigint"==typeof e){var C=String(e)+"n";return A?I(e,C):C}var L=void 0===v.depth?5:v.depth;if(void 0===i&&(i=0),i>=L&&L>0&&"object"==typeof e)return F(e)?"[Array]":"[Object]";var V=function(t,e){var r;if("\t"===t.indent)r="\t";else{if(!("number"==typeof t.indent&&t.indent>0))return null;r=S.call(Array(t.indent+1)," ")}return{base:r,prev:S.call(Array(e+1),r)}}(v,i);if(void 0===p)p=[];else if(G(p,e)>=0)return"[Circular]";function X(e,r,n){if(r&&(p=j.call(p)).push(r),n){var o={depth:v.depth};return W(v,"quoteStyle")&&(o.quoteStyle=v.quoteStyle),t(e,o,i+1,p)}return t(e,v,i+1,p)}if("function"==typeof e&&!D(e)){var Y=function(t){if(t.name)return t.name;var e=h.call(y.call(t),/^function\s*([\w$]+)/);if(e)return e[1];return null}(e),Q=Z(e,X);return"[Function"+(Y?": "+Y:" (anonymous)")+"]"+(Q.length>0?" { "+S.call(Q,", ")+" }":"")}if(U(e)){var tt=x?g.call(String(e),/^(Symbol\(.*\))_[^)]*$/,"$1"):_.call(e);return"object"!=typeof e||x?tt:H(tt)}if(function(t){if(!t||"object"!=typeof t)return!1;if("undefined"!=typeof HTMLElement&&t instanceof HTMLElement)return!0;return"string"==typeof t.nodeName&&"function"==typeof t.getAttribute}(e)){for(var et="<"+b.call(String(e.nodeName)),rt=e.attributes||[],nt=0;nt<rt.length;nt++)et+=" "+rt[nt].name+"="+B(N(rt[nt].value),"double",v);return et+=">",e.childNodes&&e.childNodes.length&&(et+="..."),et+="</"+b.call(String(e.nodeName))+">"}if(F(e)){if(0===e.length)return"[]";var ot=Z(e,X);return V&&!function(t){for(var e=0;e<t.length;e++)if(G(t[e],"\n")>=0)return!1;return!0}(ot)?"["+J(ot,V)+"]":"[ "+S.call(ot,", ")+" ]"}if(function(t){return!("[object Error]"!==$(t)||R&&"object"==typeof t&&R in t)}(e)){var it=Z(e,X);return"cause"in Error.prototype||!("cause"in e)||E.call(e,"cause")?0===it.length?"["+String(e)+"]":"{ ["+String(e)+"] "+S.call(it,", ")+" }":"{ ["+String(e)+"] "+S.call(w.call("[cause]: "+X(e.cause),it),", ")+" }"}if("object"==typeof e&&m){if(k&&"function"==typeof e[k]&&M)return M(e,{depth:L-i});if("symbol"!==m&&"function"==typeof e.inspect)return e.inspect()}if(function(t){if(!r||!t||"object"!=typeof t)return!1;try{r.call(t);try{a.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}(e)){var at=[];return n&&n.call(e,(function(t,r){at.push(X(r,e,!0)+" => "+X(t,e))})),K("Map",r.call(e),at,V)}if(function(t){if(!a||!t||"object"!=typeof t)return!1;try{a.call(t);try{r.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}(e)){var ut=[];return u&&u.call(e,(function(t){ut.push(X(t,e))})),K("Set",a.call(e),ut,V)}if(function(t){if(!c||!t||"object"!=typeof t)return!1;try{c.call(t,c);try{f.call(t,f)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}(e))return q("WeakMap");if(function(t){if(!f||!t||"object"!=typeof t)return!1;try{f.call(t,f);try{c.call(t,c)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}(e))return q("WeakSet");if(function(t){if(!l||!t||"object"!=typeof t)return!1;try{return l.call(t),!0}catch(t){}return!1}(e))return q("WeakRef");if(function(t){return!("[object Number]"!==$(t)||R&&"object"==typeof t&&R in t)}(e))return H(X(Number(e)));if(function(t){if(!t||"object"!=typeof t||!P)return!1;try{return P.call(t),!0}catch(t){}return!1}(e))return H(X(P.call(e)));if(function(t){return!("[object Boolean]"!==$(t)||R&&"object"==typeof t&&R in t)}(e))return H(s.call(e));if(function(t){return!("[object String]"!==$(t)||R&&"object"==typeof t&&R in t)}(e))return H(X(String(e)));if(!function(t){return!("[object Date]"!==$(t)||R&&"object"==typeof t&&R in t)}(e)&&!D(e)){var ct=Z(e,X),ft=T?T(e)===Object.prototype:e instanceof Object||e.constructor===Object,lt=e instanceof Object?"":"null prototype",st=!ft&&R&&Object(e)===e&&R in e?d.call($(e),8,-1):lt?"Object":"",pt=(ft||"function"!=typeof e.constructor?"":e.constructor.name?e.constructor.name+" ":"")+(st||lt?"["+S.call(w.call([],st||[],lt||[]),": ")+"] ":"");return 0===ct.length?pt+"{}":V?pt+"{"+J(ct,V)+"}":pt+"{ "+S.call(ct,", ")+" }"}return String(e)};var L=Object.prototype.hasOwnProperty||function(t){return t in this};function W(t,e){return L.call(t,e)}function $(t){return p.call(t)}function G(t,e){if(t.indexOf)return t.indexOf(e);for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}function z(t,e){if(t.length>e.maxStringLength){var r=t.length-e.maxStringLength,n="... "+r+" more character"+(r>1?"s":"");return z(d.call(t,0,e.maxStringLength),e)+n}return B(g.call(g.call(t,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,V),"single",e)}function V(t){var e=t.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return r?"\\"+r:"\\x"+(e<16?"0":"")+v.call(e.toString(16))}function H(t){return"Object("+t+")"}function q(t){return t+" { ? }"}function K(t,e,r,n){return t+" ("+e+") {"+(n?J(r,n):S.call(r,", "))+"}"}function J(t,e){if(0===t.length)return"";var r="\n"+e.prev+e.base;return r+S.call(t,","+r)+"\n"+e.prev}function Z(t,e){var r=F(t),n=[];if(r){n.length=t.length;for(var o=0;o<t.length;o++)n[o]=W(t,o)?e(t[o],t):""}var i,a="function"==typeof O?O(t):[];if(x){i={};for(var u=0;u<a.length;u++)i["$"+a[u]]=a[u]}for(var c in t)W(t,c)&&(r&&String(Number(c))===c&&c<t.length||x&&i["$"+c]instanceof Symbol||(m.call(/[^\w$]/,c)?n.push(e(c,t)+": "+e(t[c],t)):n.push(c+": "+e(t[c],t))));if("function"==typeof O)for(var f=0;f<a.length;f++)E.call(t,a[f])&&n.push("["+e(a[f])+"]: "+e(t[a[f]],t));return n}return Ui}function ea(){return $i?Wi:($i=1,Wi=function(t){return"string"==typeof t||"symbol"==typeof t})}function ra(){if(Hi)return Vi;Hi=1;var t=zi?Gi:(zi=1,Gi=function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"==typeof t?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0});return Vi=function(e){return"symbol"==typeof e?"Symbol":"bigint"==typeof e?"BigInt":t(e)}}var na,oa,ia,aa,ua,ca,fa,la,sa=oi("%TypeError%"),pa=ta(),ya=ea(),ha=ra(),da=function(t,e){if("Object"!==ha(t))throw new sa("Assertion failed: Type(O) is not Object");if(!ya(e))throw new sa("Assertion failed: IsPropertyKey(P) is not true, got "+pa(e));return t[e]},ga=oi("%TypeError%"),va=function(t,e){if(null==t)throw new ga(e||"Cannot call method on "+t);return t};function ba(){if(oa)return na;oa=1;var t=oi("%Object%"),e=va;return na=function(r){return e(r),t(r)}}function ma(){if(ca)return ua;ca=1;var t,e,r=Function.prototype.toString,n="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof n&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw e}}),e={},n((function(){throw 42}),null,t)}catch(t){t!==e&&(n=null)}else n=null;var o=/^\s*class\b/,i=function(t){try{var e=r.call(t);return o.test(e)}catch(t){return!1}},a=function(t){try{return!i(t)&&(r.call(t),!0)}catch(t){return!1}},u=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,f=!(0 in[,]),l=function(){return!1};if("object"==typeof document){var s=document.all;u.call(s)===u.call(document.all)&&(l=function(t){if((f||!t)&&(void 0===t||"object"==typeof t))try{var e=u.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}return ua=n?function(r){if(l(r))return!0;if(!r)return!1;if("function"!=typeof r&&"object"!=typeof r)return!1;try{n(r,null,t)}catch(t){if(t!==e)return!1}return!i(r)&&a(r)}:function(t){if(l(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(c)return a(t);if(i(t))return!1;var e=u.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&a(t)}}function wa(){return la?fa:(la=1,fa=ma())}var Sa,ja,Aa,Pa,Oa,_a,xa=oi("%TypeError%"),Ra=function(){if(aa)return ia;aa=1;var t=oi("%TypeError%"),e=ea(),r=ba();return ia=function(n,o){if(!e(o))throw new t("Assertion failed: IsPropertyKey(P) is not true");return r(n)[o]}}(),Ea=wa(),Ta=ea(),Ia=ta();function Ma(){if(ja)return Sa;ja=1;var t=Po;return Sa=function(){return t()&&!!Symbol.toStringTag}}function Ca(){if(Pa)return Aa;Pa=1;var t,e,r,n,o=Ni,i=Ma()();if(i){t=o("Object.prototype.hasOwnProperty"),e=o("RegExp.prototype.exec"),r={};var a=function(){throw r};n={toString:a,valueOf:a},"symbol"==typeof Symbol.toPrimitive&&(n[Symbol.toPrimitive]=a)}var u=o("Object.prototype.toString"),c=Object.getOwnPropertyDescriptor;return Aa=i?function(o){if(!o||"object"!=typeof o)return!1;var i=c(o,"lastIndex");if(!(i&&t(i,"value")))return!1;try{e(o,n)}catch(t){return t===r}}:function(t){return!(!t||"object"!=typeof t&&"function"!=typeof t)&&"[object RegExp]"===u(t)}}function ka(){return _a?Oa:(_a=1,Oa=function(t){return!!t})}var Ba=oi("%Symbol.match%",!0),Na=Ca(),Fa=ka(),Da=oi,Ua=Da("%String%"),La=Da("%TypeError%"),Wa=function(t){if("symbol"==typeof t)throw new La("Cannot convert a Symbol value to a string");return Ua(t)},$a={exports:{}},Ga=function(){return"string"==typeof function(){}.name},za=Object.getOwnPropertyDescriptor;if(za)try{za([],"length")}catch(t){za=null}Ga.functionsHaveConfigurableNames=function(){if(!Ga()||!za)return!1;var t=za((function(){}),"name");return!!t&&!!t.configurable};var Va=Function.prototype.bind;Ga.boundFunctionsHaveNames=function(){return Ga()&&"function"==typeof Va&&""!==function(){}.bind().name};var Ha=Ga;!function(t){var e=Ha.functionsHaveConfigurableNames(),r=Object,n=TypeError;t.exports=function(){if(null!=this&&this!==r(this))throw new n("RegExp.prototype.flags getter called on non-object");var t="";return this.hasIndices&&(t+="d"),this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.unicodeSets&&(t+="v"),this.sticky&&(t+="y"),t},e&&Object.defineProperty&&Object.defineProperty(t.exports,"name",{value:"get flags"})}($a);var qa=$a.exports,Ka=qa,Ja=Mi.supportsDescriptors,Za=Object.getOwnPropertyDescriptor,Xa=function(){if(Ja&&"gim"===/a/gim.flags){var t=Za(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof RegExp.prototype.dotAll&&"boolean"==typeof RegExp.prototype.hasIndices){var e="",r={};if(Object.defineProperty(r,"hasIndices",{get:function(){e+="d"}}),Object.defineProperty(r,"sticky",{get:function(){e+="y"}}),"dy"===e)return t.get}}return Ka},Ya=Mi.supportsDescriptors,Qa=Xa,tu=Object.getOwnPropertyDescriptor,eu=Object.defineProperty,ru=TypeError,nu=Object.getPrototypeOf,ou=/a/,iu=Mi,au=qa,uu=Xa,cu=function(){if(!Ya||!nu)throw new ru("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=Qa(),e=nu(ou),r=tu(e,"flags");return r&&r.get===t||eu(e,"flags",{configurable:!0,enumerable:!1,get:t}),t},fu=ui(uu());iu(fu,{getPolyfill:uu,implementation:au,shim:cu});var lu,su,pu,yu,hu,du,gu,vu,bu=fu;function mu(){return su?lu:(su=1,lu=function(t){return"number"==typeof t&&t>=55296&&t<=56319})}function wu(){return yu?pu:(yu=1,pu=function(t){return"number"==typeof t&&t>=56320&&t<=57343})}function Su(){if(du)return hu;du=1;var t=oi,e=t("%TypeError%"),r=t("%String.fromCharCode%"),n=mu(),o=wu();return hu=function(t,i){if(!n(t)||!o(i))throw new e("Assertion failed: `lead` must be a leading surrogate char code, and `trail` must be a trailing surrogate char code");return r(t)+r(i)}}function ju(){if(vu)return gu;vu=1;var t=oi("%TypeError%"),e=Ni,r=mu(),n=wu(),o=ra(),i=Su(),a=e("String.prototype.charAt"),u=e("String.prototype.charCodeAt");return gu=function(e,c){if("String"!==o(e))throw new t("Assertion failed: `string` must be a String");var f=e.length;if(c<0||c>=f)throw new t("Assertion failed: `position` must be >= 0, and < the length of `string`");var l=u(e,c),s=a(e,c),p=r(l),y=n(l);if(!p&&!y)return{"[[CodePoint]]":s,"[[CodeUnitCount]]":1,"[[IsUnpairedSurrogate]]":!1};if(y||c+1===f)return{"[[CodePoint]]":s,"[[CodeUnitCount]]":1,"[[IsUnpairedSurrogate]]":!0};var h=u(e,c+1);return n(h)?{"[[CodePoint]]":i(l,h),"[[CodeUnitCount]]":2,"[[IsUnpairedSurrogate]]":!1}:{"[[CodePoint]]":s,"[[CodeUnitCount]]":1,"[[IsUnpairedSurrogate]]":!0}}}var Au,Pu,Ou=oi("%Math.abs%"),_u=function(t){return Ou(t)},xu=ra(),Ru=Math.floor,Eu=function(t){return"BigInt"===xu(t)?t:Ru(t)},Tu=Number.isNaN||function(t){return t!=t},Iu=Tu,Mu=function(t){return("number"==typeof t||"bigint"==typeof t)&&!Iu(t)&&t!==1/0&&t!==-1/0};function Cu(){if(Pu)return Au;Pu=1;var t=_u,e=Eu,r=ra(),n=Tu,o=Mu;return Au=function(i){if("Number"!==r(i)||n(i)||!o(i))return!1;var a=t(i);return e(a)===a}}var ku,Bu,Nu,Fu,Du,Uu,Lu,Wu,$u,Gu,zu,Vu,Hu,qu,Ku,Ju,Zu,Xu,Yu,Qu,tc,ec,rc,nc,oc,ic,ac,uc,cc,fc,lc=oi,sc=lc("%Math%"),pc=lc("%Number%").MAX_SAFE_INTEGER||sc.pow(2,53)-1;function yc(){if(Uu)return Du;Uu=1;var t=bi,e=oi,r=t()&&e("%Object.defineProperty%",!0),n=t.hasArrayLengthDefineBug(),o=n&&Fi(),i=Ni("Object.prototype.propertyIsEnumerable");return Du=function(t,e,a,u,c,f){if(!r){if(!t(f))return!1;if(!f["[[Configurable]]"]||!f["[[Writable]]"])return!1;if(c in u&&i(u,c)!==!!f["[[Enumerable]]"])return!1;var l=f["[[Value]]"];return u[c]=l,e(u[c],l)}return n&&"length"===c&&"[[Value]]"in f&&o(u)&&u.length!==f["[[Value]]"]?(u.length=f["[[Value]]"],u.length===f["[[Value]]"]):(r(u,c,a(f)),!0)},Du}function hc(){if(Wu)return Lu;Wu=1;var t=Io;return Lu=function(e){return t(e,"[[StartIndex]]")&&t(e,"[[EndIndex]]")&&e["[[StartIndex]]"]>=0&&e["[[EndIndex]]"]>=e["[[StartIndex]]"]&&String(parseInt(e["[[StartIndex]]"],10))===String(e["[[StartIndex]]"])&&String(parseInt(e["[[EndIndex]]"],10))===String(e["[[EndIndex]]"])}}function dc(){if(Gu)return $u;Gu=1;var t=oi,e=t("%TypeError%"),r=t("%SyntaxError%"),n=Io,o={"Property Descriptor":function(t){var r={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};if(!t)return!1;for(var o in t)if(n(t,o)&&!r[o])return!1;var i=n(t,"[[Value]]"),a=n(t,"[[Get]]")||n(t,"[[Set]]");if(i&&a)throw new e("Property Descriptors may not be both accessor and data descriptors");return!0},"Match Record":hc(),"Iterator Record":function(t){return n(t,"[[Iterator]]")&&n(t,"[[NextMethod]]")&&n(t,"[[Done]]")},"PromiseCapability Record":function(t){return!!t&&n(t,"[[Resolve]]")&&"function"==typeof t["[[Resolve]]"]&&n(t,"[[Reject]]")&&"function"==typeof t["[[Reject]]"]&&n(t,"[[Promise]]")&&t["[[Promise]]"]&&"function"==typeof t["[[Promise]]"].then},"AsyncGeneratorRequest Record":function(t){return!!t&&n(t,"[[Completion]]")&&n(t,"[[Capability]]")&&o["PromiseCapability Record"](t["[[Capability]]"])}};return $u=function(t,n,i,a){var u=o[n];if("function"!=typeof u)throw new r("unknown record type: "+n);if("Object"!==t(a)||!u(a))throw new e(i+" must be a "+n)},$u}function gc(){return Vu?zu:(Vu=1,zu=function(t){if(void 0===t)return t;var e={};return"[[Value]]"in t&&(e.value=t["[[Value]]"]),"[[Writable]]"in t&&(e.writable=!!t["[[Writable]]"]),"[[Get]]"in t&&(e.get=t["[[Get]]"]),"[[Set]]"in t&&(e.set=t["[[Set]]"]),"[[Enumerable]]"in t&&(e.enumerable=!!t["[[Enumerable]]"]),"[[Configurable]]"in t&&(e.configurable=!!t["[[Configurable]]"]),e})}function vc(){if(qu)return Hu;qu=1;var t=dc(),e=gc(),r=ra();return Hu=function(n){return void 0!==n&&t(r,"Property Descriptor","Desc",n),e(n)}}function bc(){if(Ju)return Ku;Ju=1;var t=Io,e=ra(),r=dc();return Ku=function(n){return void 0!==n&&(r(e,"Property Descriptor","Desc",n),!(!t(n,"[[Value]]")&&!t(n,"[[Writable]]")))}}function mc(){if(Xu)return Zu;Xu=1;var t=Tu;return Zu=function(e,r){return e===r?0!==e||1/e==1/r:t(e)&&t(r)}}function wc(){return ec?tc:(ec=1,tc=function(t,e){for(var r=0;r<t.length;r+=1)e(t[r],r,t)})}function Sc(){if(nc)return rc;nc=1;var t=oi,e=Ni,r=ta(),n=t("%TypeError%"),o=t("%WeakMap%",!0),i=t("%Map%",!0),a=e("WeakMap.prototype.get",!0),u=e("WeakMap.prototype.set",!0),c=e("WeakMap.prototype.has",!0),f=e("Map.prototype.get",!0),l=e("Map.prototype.set",!0),s=e("Map.prototype.has",!0),p=function(t,e){for(var r,n=t;null!==(r=n.next);n=r)if(r.key===e)return n.next=r.next,r.next=t.next,t.next=r,r};return rc=function(){var t,e,y,h={assert:function(t){if(!h.has(t))throw new n("Side channel does not contain "+r(t))},get:function(r){if(o&&r&&("object"==typeof r||"function"==typeof r)){if(t)return a(t,r)}else if(i){if(e)return f(e,r)}else if(y)return function(t,e){var r=p(t,e);return r&&r.value}(y,r)},has:function(r){if(o&&r&&("object"==typeof r||"function"==typeof r)){if(t)return c(t,r)}else if(i){if(e)return s(e,r)}else if(y)return function(t,e){return!!p(t,e)}(y,r);return!1},set:function(r,n){o&&r&&("object"==typeof r||"function"==typeof r)?(t||(t=new o),u(t,r,n)):i?(e||(e=new i),l(e,r,n)):(y||(y={key:{},next:null}),function(t,e,r){var n=p(t,e);n?n.value=r:t.next={key:e,next:t.next,value:r}}(y,r,n))}};return h}}function jc(){if(ic)return oc;ic=1;var t=oi,e=Io,r=Sc()(),n=t("%TypeError%"),o={assert:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new n("`O` is not an object");if("string"!=typeof e)throw new n("`slot` must be a string");if(r.assert(t),!o.has(t,e))throw new n("`"+e+"` is not present on `O`")},get:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new n("`O` is not an object");if("string"!=typeof e)throw new n("`slot` must be a string");var o=r.get(t);return o&&o["$"+e]},has:function(t,o){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new n("`O` is not an object");if("string"!=typeof o)throw new n("`slot` must be a string");var i=r.get(t);return!!i&&e(i,"$"+o)},set:function(t,e,o){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new n("`O` is not an object");if("string"!=typeof e)throw new n("`slot` must be a string");var i=r.get(t);i||(i={},r.set(t,i)),i["$"+e]=o}};return Object.freeze&&Object.freeze(o),oc=o}var Ac,Pc,Oc,_c,xc,Rc,Ec=oi("%TypeError%"),Tc=ea(),Ic=mc(),Mc=ra(),Cc=function(){try{return delete[].length,!0}catch(t){return!1}}(),kc=function(t,e,r,n){if("Object"!==Mc(t))throw new Ec("Assertion failed: `O` must be an Object");if(!Tc(e))throw new Ec("Assertion failed: `P` must be a Property Key");if("Boolean"!==Mc(n))throw new Ec("Assertion failed: `Throw` must be a Boolean");if(n){if(t[e]=r,Cc&&!Ic(t[e],r))throw new Ec("Attempted to assign to readonly property.");return!0}try{return t[e]=r,!Cc||Ic(t[e],r)}catch(t){return!1}};function Bc(){if(Rc)return xc;Rc=1;var t=Date.prototype.getDay,e=Object.prototype.toString,r=Ma()();return xc=function(n){return"object"==typeof n&&null!==n&&(r?function(e){try{return t.call(e),!0}catch(t){return!1}}(n):"[object Date]"===e.call(n))}}var Nc,Fc,Dc,Uc,Lc,Wc,$c,Gc,zc,Vc,Hc,qc,Kc,Jc,Zc,Xc,Yc,Qc={exports:{}};function tf(){if(Nc)return Qc.exports;Nc=1;var t=Object.prototype.toString;if(xo()){var e=Symbol.prototype.toString,r=/^Symbol\(.*\)$/;Qc.exports=function(n){if("symbol"==typeof n)return!0;if("[object Symbol]"!==t.call(n))return!1;try{return function(t){return"symbol"==typeof t.valueOf()&&r.test(e.call(t))}(n)}catch(t){return!1}}}else Qc.exports=function(t){return!1};return Qc.exports}function ef(){if(Dc)return Fc;Dc=1;var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,e=_c?Oc:(_c=1,Oc=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}),r=ma(),n=Bc(),o=tf();return Fc=function(i){if(e(i))return i;var a,u="default";if(arguments.length>1&&(arguments[1]===String?u="string":arguments[1]===Number&&(u="number")),t&&(Symbol.toPrimitive?a=function(t,e){var n=t[e];if(null!=n){if(!r(n))throw new TypeError(n+" returned for property "+e+" of object "+t+" is not a function");return n}}(i,Symbol.toPrimitive):o(i)&&(a=Symbol.prototype.valueOf)),void 0!==a){var c=a.call(i,u);if(e(c))return c;throw new TypeError("unable to convert exotic object to primitive")}return"default"===u&&(n(i)||o(i))&&(u="string"),function(t,n){if(null==t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof n||"number"!==n&&"string"!==n)throw new TypeError('hint must be "string" or "number"');var o,i,a,u="string"===n?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<u.length;++a)if(o=t[u[a]],r(o)&&(i=o.call(t),e(i)))return i;throw new TypeError("No default value")}(i,"default"===u?"number":u)},Fc}function rf(){if(zc)return Gc;zc=1;var t=va,e=Wa,r=Ni("String.prototype.replace"),n=/^\s$/.test("᠎"),o=n?/^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/:/^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/,i=n?/[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/:/[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;return Gc=function(){var n=e(t(this));return r(r(n,o,""),i,"")}}function nf(){if(Hc)return Vc;Hc=1;var t=rf(),e="᠎";return Vc=function(){return String.prototype.trim&&"​"==="​".trim()&&e.trim()===e&&"_᠎"==="_᠎".trim()&&"᠎_"==="᠎_".trim()?String.prototype.trim:t}}function of(){if(Zc)return Jc;Zc=1;var t=ui,e=Mi,r=va,n=rf(),o=nf(),i=function(){if(Kc)return qc;Kc=1;var t=Mi,e=nf();return qc=function(){var r=e();return t(String.prototype,{trim:r},{trim:function(){return String.prototype.trim!==r}}),r},qc}(),a=t(o()),u=function(t){return r(t),a(t)};return e(u,{getPolyfill:o,implementation:n,shim:i}),Jc=u}var af,uf,cf=oi,ff=cf("%TypeError%"),lf=cf("%Number%"),sf=Pc?Ac:(Pc=1,Ac=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}),pf=function(){if(Lc)return Uc;Lc=1;var t=ef();return Uc=function(e){return arguments.length>1?t(e,arguments[1]):t(e)},Uc}(),yf=function(){if(Yc)return Xc;Yc=1;var t=oi,e=t("%Number%"),r=t("%RegExp%"),n=t("%TypeError%"),o=t("%parseInt%"),i=Ni,a=function(){if($c)return Wc;$c=1;var t=Ni,e=oi,r=Ca(),n=t("RegExp.prototype.exec"),o=e("%TypeError%");return Wc=function(t){if(!r(t))throw new o("`regex` must be a RegExp");return function(e){return null!==n(t,e)}},Wc}(),u=i("String.prototype.slice"),c=a(/^0b[01]+$/i),f=a(/^0o[0-7]+$/i),l=a(/^[-+]0x[0-9a-f]+$/i),s=a(new r("["+["","​","￾"].join("")+"]","g")),p=of(),y=ra();return Xc=function t(r){if("String"!==y(r))throw new n("Assertion failed: `argument` is not a String");if(c(r))return e(o(u(r,2),2));if(f(r))return e(o(u(r,2),8));if(s(r)||l(r))return NaN;var i=p(r);return i!==r?t(i):e(r)},Xc}(),hf=_u,df=Eu,gf=function(t){var e=sf(t)?t:pf(t,lf);if("symbol"==typeof e)throw new ff("Cannot convert a Symbol value to a number");if("bigint"==typeof e)throw new ff("Conversion from 'BigInt' to 'number' is not allowed.");return"string"==typeof e?yf(e):lf(e)},vf=Tu,bf=Mu,mf=function(t){return t>=0?1:-1},wf=pc,Sf=function(t){var e=gf(t);if(vf(e)||0===e)return 0;if(!bf(e))return e;var r=df(hf(e));return 0===r?0:mf(e)*r},jf=function(t){var e=Sf(t);return e<=0?0:e>wf?wf:e};var Af=oi,Pf=xo(),Of=Af("%TypeError%"),_f=Af("%IteratorPrototype%",!0),xf=function(){if(Bu)return ku;Bu=1;var t=oi,e=ju(),r=Cu(),n=ra(),o=pc,i=t("%TypeError%");return ku=function(t,a,u){if("String"!==n(t))throw new i("Assertion failed: `S` must be a String");if(!r(a)||a<0||a>o)throw new i("Assertion failed: `length` must be an integer >= 0 and <= 2**53");if("Boolean"!==n(u))throw new i("Assertion failed: `unicode` must be a Boolean");return u?a+1>=t.length?a+1:a+e(t,a)["[[CodeUnitCount]]"]:a+1}}(),Rf=function(){if(Fu)return Nu;Fu=1;var t=oi("%TypeError%"),e=ra();return Nu=function(r,n){if("Boolean"!==e(n))throw new t("Assertion failed: Type(done) is not Boolean");return{value:r,done:n}}}(),Ef=function(){if(Qu)return Yu;Qu=1;var t=oi("%TypeError%"),e=yc(),r=vc(),n=bc(),o=ea(),i=mc(),a=ra();return Yu=function(u,c,f){if("Object"!==a(u))throw new t("Assertion failed: Type(O) is not Object");if(!o(c))throw new t("Assertion failed: IsPropertyKey(P) is not true");return e(n,i,r,u,c,{"[[Configurable]]":!0,"[[Enumerable]]":!1,"[[Value]]":f,"[[Writable]]":!0})}}(),Tf=da,If=function(){if(uc)return ac;uc=1;var t=oi,e=t("%Object.create%",!0),r=t("%TypeError%"),n=t("%SyntaxError%"),o=Di(),i=ra(),a=wc(),u=jc(),c=To();return ac=function(t){if(null!==t&&"Object"!==i(t))throw new r("Assertion failed: `proto` must be null or an object");var f,l=arguments.length<2?[]:arguments[1];if(!o(l))throw new r("Assertion failed: `additionalInternalSlotsList` must be an Array");if(e)f=e(t);else if(c)f={__proto__:t};else{if(null===t)throw new n("native Object.create support is required to create null objects");var s=function(){};s.prototype=t,f=new s}return l.length>0&&a(l,(function(t){u.set(f,t,void 0)})),f},ac}(),Mf=function(){if(fc)return cc;fc=1;var t=oi("%TypeError%"),e=Ni("RegExp.prototype.exec"),r=Yi,n=da,o=wa(),i=ra();return cc=function(a,u){if("Object"!==i(a))throw new t("Assertion failed: `R` must be an Object");if("String"!==i(u))throw new t("Assertion failed: `S` must be a String");var c=n(a,"exec");if(o(c)){var f=r(c,a,[u]);if(null===f||"Object"===i(f))return f;throw new t('"exec" method must return `null` or an Object')}return e(a,u)},cc}(),Cf=kc,kf=jf,Bf=Wa,Nf=ra(),Ff=jc(),Df=function(){if(uf)return af;uf=1;var t=oi("%Object.defineProperty%",!0),e=Ma()(),r=Io,n=e?Symbol.toStringTag:null;return af=function(e,o){var i=arguments.length>2&&arguments[2]&&arguments[2].force;!n||!i&&r(e,n)||(t?t(e,n,{configurable:!0,enumerable:!1,value:o,writable:!1}):e[n]=o)},af}(),Uf=function(t,e,r,n){if("String"!==Nf(e))throw new Of("`S` must be a string");if("Boolean"!==Nf(r))throw new Of("`global` must be a boolean");if("Boolean"!==Nf(n))throw new Of("`fullUnicode` must be a boolean");Ff.set(this,"[[IteratingRegExp]]",t),Ff.set(this,"[[IteratedString]]",e),Ff.set(this,"[[Global]]",r),Ff.set(this,"[[Unicode]]",n),Ff.set(this,"[[Done]]",!1)};_f&&(Uf.prototype=If(_f));if(Ef(Uf.prototype,"next",(function(){var t=this;if("Object"!==Nf(t))throw new Of("receiver must be an object");if(!(t instanceof Uf&&Ff.has(t,"[[IteratingRegExp]]")&&Ff.has(t,"[[IteratedString]]")&&Ff.has(t,"[[Global]]")&&Ff.has(t,"[[Unicode]]")&&Ff.has(t,"[[Done]]")))throw new Of('"this" value must be a RegExpStringIterator instance');if(Ff.get(t,"[[Done]]"))return Rf(void 0,!0);var e=Ff.get(t,"[[IteratingRegExp]]"),r=Ff.get(t,"[[IteratedString]]"),n=Ff.get(t,"[[Global]]"),o=Ff.get(t,"[[Unicode]]"),i=Mf(e,r);if(null===i)return Ff.set(t,"[[Done]]",!0),Rf(void 0,!0);if(n){if(""===Bf(Tf(i,"0"))){var a=kf(Tf(e,"lastIndex")),u=xf(r,a,o);Cf(e,"lastIndex",u,!0)}return Rf(i,!1)}return Ff.set(t,"[[Done]]",!0),Rf(i,!1)})),Pf&&(Df(Uf.prototype,"RegExp String Iterator"),Symbol.iterator&&"function"!=typeof Uf.prototype[Symbol.iterator])){Ef(Uf.prototype,Symbol.iterator,(function(){return this}))}var Lf,Wf,$f,Gf,zf,Vf,Hf,qf,Kf,Jf,Zf,Xf={exports:{}};function Yf(){if(Gf)return $f;Gf=1;var t=Io,e=oi("%TypeError%");return $f=function(r,n){if("Object"!==r.Type(n))return!1;var o={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var i in n)if(t(n,i)&&!o[i])return!1;if(r.IsDataDescriptor(n)&&r.IsAccessorDescriptor(n))throw new e("Property Descriptors may not be both accessor and data descriptors");return!0}}function Qf(){if(Vf)return zf;Vf=1;var t=Io,e=ra(),r=dc();return zf=function(n){return void 0!==n&&(r(e,"Property Descriptor","Desc",n),!(!t(n,"[[Get]]")&&!t(n,"[[Set]]")))}}function tl(){if(qf)return Hf;qf=1;var t=Io,e=oi("%TypeError%"),r=ra(),n=ka(),o=wa();return Hf=function(i){if("Object"!==r(i))throw new e("ToPropertyDescriptor requires an object");var a={};if(t(i,"enumerable")&&(a["[[Enumerable]]"]=n(i.enumerable)),t(i,"configurable")&&(a["[[Configurable]]"]=n(i.configurable)),t(i,"value")&&(a["[[Value]]"]=i.value),t(i,"writable")&&(a["[[Writable]]"]=n(i.writable)),t(i,"get")){var u=i.get;if(void 0!==u&&!o(u))throw new e("getter must be a function");a["[[Get]]"]=u}if(t(i,"set")){var c=i.set;if(void 0!==c&&!o(c))throw new e("setter must be a function");a["[[Set]]"]=c}if((t(a,"[[Get]]")||t(a,"[[Set]]"))&&(t(a,"[[Value]]")||t(a,"[[Writable]]")))throw new e("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return a},Hf}function el(){if(Jf)return Kf;Jf=1;var t=oi("%TypeError%"),e=Yf(),r=yc(),n=vc(),o=Qf(),i=bc(),a=ea(),u=mc(),c=tl(),f=ra();return Kf=function(l,s,p){if("Object"!==f(l))throw new t("Assertion failed: Type(O) is not Object");if(!a(s))throw new t("Assertion failed: IsPropertyKey(P) is not true");var y=e({Type:f,IsDataDescriptor:i,IsAccessorDescriptor:o},p)?p:c(p);if(!e({Type:f,IsDataDescriptor:i,IsAccessorDescriptor:o},y))throw new t("Assertion failed: Desc is not a valid Property Descriptor");return r(i,u,n,l,s,y)},Kf}var rl=oi,nl=rl("%Symbol.species%",!0),ol=rl("%TypeError%"),il=function(){if(Zf)return Xf.exports;Zf=1;var t=(Wf?Lf:(Wf=1,Lf=oi))("%Reflect.construct%",!0),e=el();try{e({},"",{"[[Get]]":function(){}})}catch(t){e=null}if(e&&t){var r={},n={};e(n,"length",{"[[Get]]":function(){throw r},"[[Enumerable]]":!0}),Xf.exports=function(e){try{t(e,n)}catch(t){return t===r}}}else Xf.exports=function(t){return"function"==typeof t&&!!t.prototype};return Xf.exports}(),al=ra(),ul=function(t,e,r,n){return new Uf(t,e,r,n)},cl=da,fl=kc,ll=function(t,e){if("Object"!==al(t))throw new ol("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==al(r))throw new ol("O.constructor is not an Object");var n=nl?r[nl]:void 0;if(null==n)return e;if(il(n))return n;throw new ol("no constructor found")},sl=jf,pl=Wa,yl=ra(),hl=bu,dl=Ni("String.prototype.indexOf"),gl=RegExp,vl="flags"in RegExp.prototype,bl=function(t){var e=this;if("Object"!==yl(e))throw new TypeError('"this" value must be an Object');var r=pl(t),n=function(t,e){var r="flags"in e?cl(e,"flags"):pl(hl(e));return{flags:r,matcher:new t(vl&&"string"==typeof r?e:t===gl?e.source:e,r)}}(ll(e,gl),e),o=n.flags,i=n.matcher,a=sl(cl(e,"lastIndex"));fl(i,"lastIndex",a,!0);var u=dl(o,"g")>-1,c=dl(o,"u")>-1;return ul(i,r,u,c)},ml=Object.defineProperty,wl=Object.getOwnPropertyDescriptor;if(ml&&wl){var Sl=wl(bl,"name");Sl&&Sl.configurable&&ml(bl,"name",{value:"[Symbol.matchAll]"})}var jl=bl,Al=xo(),Pl=jl,Ol=function(){return Al&&"symbol"==typeof Symbol.matchAll&&"function"==typeof RegExp.prototype[Symbol.matchAll]?RegExp.prototype[Symbol.matchAll]:Pl},_l=Yi,xl=da,Rl=function(t,e){if(!Ta(e))throw new xa("Assertion failed: IsPropertyKey(P) is not true");var r=Ra(t,e);if(null!=r){if(!Ea(r))throw new xa(Ia(e)+" is not a function: "+Ia(r));return r}},El=function(t){if(!t||"object"!=typeof t)return!1;if(Ba){var e=t[Ba];if(void 0!==e)return Fa(e)}return Na(t)},Tl=Wa,Il=va,Ml=Ni,Cl=xo(),kl=bu,Bl=Ml("String.prototype.indexOf"),Nl=Ol,Fl=function(t){var e=Nl();if(Cl&&"symbol"==typeof Symbol.matchAll){var r=Rl(t,Symbol.matchAll);return r===RegExp.prototype[Symbol.matchAll]&&r!==e?e:r}if(El(t))return e},Dl=function(t){var e=Il(this);if(null!=t){if(El(t)){var r="flags"in t?xl(t,"flags"):kl(t);if(Il(r),Bl(Tl(r),"g")<0)throw new TypeError("matchAll requires a global regular expression")}var n=Fl(t);if(void 0!==n)return _l(n,t,[e])}var o=Tl(e),i=new RegExp(t,"g");return _l(Fl(i),i,[o])},Ul=Dl,Ll=function(){if(String.prototype.matchAll)try{"".matchAll(RegExp.prototype)}catch(t){return String.prototype.matchAll}return Ul},Wl=Mi,$l=xo(),Gl=Ll,zl=Ol,Vl=Object.defineProperty,Hl=Object.getOwnPropertyDescriptor,ql=Mi,Kl=Dl,Jl=Ll,Zl=function(){var t=Gl();if(Wl(String.prototype,{matchAll:t},{matchAll:function(){return String.prototype.matchAll!==t}}),$l){var e=Symbol.matchAll||(Symbol.for?Symbol.for("Symbol.matchAll"):Symbol("Symbol.matchAll"));if(Wl(Symbol,{matchAll:e},{matchAll:function(){return Symbol.matchAll!==e}}),Vl&&Hl){var r=Hl(Symbol,e);r&&!r.configurable||Vl(Symbol,e,{configurable:!1,enumerable:!1,value:e,writable:!1})}var n=zl(),o={};o[e]=n;var i={};i[e]=function(){return RegExp.prototype[e]!==n},Wl(RegExp.prototype,o,i)}return t},Xl=ui(Kl);ql(Xl,{getPolyfill:Jl,implementation:Kl,shim:Zl});var Yl=u(Xl),Ql=["B","MN","W"],ts=["AB","AE","AW"],es=["A","C","DM","GB","GW","HO","N","UC","V"],rs=["BM","DO","IT"],ns=["AR","CR","LB","LN","MA","SL","SQ","TR"],os=["AP","CA","FF","GM","ST","SZ"],is=["TE","KO","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","TM","US","WR","WT"],as=["PI","PAI","NID","PAT"],us=new RegExp(/([A-Z]*)\[([\s\S]*?)\]/),cs=function(){function t(t,e,r){this.token=t,this.value=e,this.values=r||[e],this.type="-"}return t.prototype.toString=function(){return"".concat(this.token).concat(this.values.map((function(t){return"[".concat(t,"]")})).join(""))},t}(),fs=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return o.type="move",o}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),ls=function(t){function e(e,r,n){var o=t.call(this,e,r,n)||this;return o.type="setup",o}return r(e,t),e.from=function(t){var r=t.match(us),n="",a=i([],o(Yl(t,/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return r&&(n=r[1]),new e(n,a.join(","),a)},e}(cs),ss=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="node-annotation",n}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),ps=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="move-annotation",n}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),ys=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(cs),hs=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="markup",n}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),ds=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="root",n}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),gs=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="game-info",n}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),vs=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="custom",n}return r(e,t),e.from=function(t){var r=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return r?new e(r[1],r[2]):new e("","")},e}(cs),bs=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.type="Timing",n}return r(e,t),e}(cs),ms=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(cs),ws={exports:{}};var Ss,js={exports:{}};function As(){return Ss||(Ss=1,function(t,e){var r;t.exports=(r=r||function(t,e){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),"undefined"!=typeof self&&self.crypto&&(r=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(r=globalThis.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==a&&a.crypto&&(r=a.crypto),!r)try{r=Qi}catch(t){}var n=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function t(){}return function(e){var r;return t.prototype=e,r=new t,t.prototype=null,r}}(),i={},u=i.lib={},c=u.Base={extend:function(t){var e=o(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},f=u.WordArray=c.extend({init:function(t,r){t=this.words=t||[],this.sigBytes=r!=e?r:4*t.length},toString:function(t){return(t||s).stringify(this)},concat:function(t){var e=this.words,r=t.words,n=this.sigBytes,o=t.sigBytes;if(this.clamp(),n%4)for(var i=0;i<o;i++){var a=r[i>>>2]>>>24-i%4*8&255;e[n+i>>>2]|=a<<24-(n+i)%4*8}else for(var u=0;u<o;u+=4)e[n+u>>>2]=r[u>>>2];return this.sigBytes+=o,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=t.ceil(r/4)},clone:function(){var t=c.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(n());return new f.init(e,t)}}),l=i.enc={},s=l.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],o=0;o<r;o++){var i=e[o>>>2]>>>24-o%4*8&255;n.push((i>>>4).toString(16)),n.push((15&i).toString(16))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n+=2)r[n>>>3]|=parseInt(t.substr(n,2),16)<<24-n%8*4;return new f.init(r,e/2)}},p=l.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],o=0;o<r;o++){var i=e[o>>>2]>>>24-o%4*8&255;n.push(String.fromCharCode(i))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n++)r[n>>>2]|=(255&t.charCodeAt(n))<<24-n%4*8;return new f.init(r,e)}},y=l.Utf8={stringify:function(t){try{return decodeURIComponent(escape(p.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return p.parse(unescape(encodeURIComponent(t)))}},h=u.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new f.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=y.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var r,n=this._data,o=n.words,i=n.sigBytes,a=this.blockSize,u=i/(4*a),c=(u=e?t.ceil(u):t.max((0|u)-this._minBufferSize,0))*a,l=t.min(4*c,i);if(c){for(var s=0;s<c;s+=a)this._doProcessBlock(o,s);r=o.splice(0,c),n.sigBytes-=l}return new f.init(r,l)},clone:function(){var t=c.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});u.Hasher=h.extend({cfg:c.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){h.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,r){return new t.init(r).finalize(e)}},_createHmacHelper:function(t){return function(e,r){return new d.HMAC.init(t,r).finalize(e)}}});var d=i.algo={};return i}(Math),r)}(js)),js.exports}!function(t,e){var r;t.exports=(r=As(),function(t){var e=r,n=e.lib,o=n.WordArray,i=n.Hasher,a=e.algo,u=[],c=[];!function(){function e(e){for(var r=t.sqrt(e),n=2;n<=r;n++)if(!(e%n))return!1;return!0}function r(t){return 4294967296*(t-(0|t))|0}for(var n=2,o=0;o<64;)e(n)&&(o<8&&(u[o]=r(t.pow(n,.5))),c[o]=r(t.pow(n,1/3)),o++),n++}();var f=[],l=a.SHA256=i.extend({_doReset:function(){this._hash=new o.init(u.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],o=r[1],i=r[2],a=r[3],u=r[4],l=r[5],s=r[6],p=r[7],y=0;y<64;y++){if(y<16)f[y]=0|t[e+y];else{var h=f[y-15],d=(h<<25|h>>>7)^(h<<14|h>>>18)^h>>>3,g=f[y-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;f[y]=d+f[y-7]+v+f[y-16]}var b=n&o^n&i^o&i,m=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),w=p+((u<<26|u>>>6)^(u<<21|u>>>11)^(u<<7|u>>>25))+(u&l^~u&s)+c[y]+f[y];p=s,s=l,l=u,u=a+w|0,a=i,i=o,o=n,n=w+(m+b)|0}r[0]=r[0]+n|0,r[1]=r[1]+o|0,r[2]=r[2]+i|0,r[3]=r[3]+a|0,r[4]=r[4]+u|0,r[5]=r[5]+l|0,r[6]=r[6]+s|0,r[7]=r[7]+p|0},_doFinalize:function(){var e=this._data,r=e.words,n=8*this._nDataBytes,o=8*e.sigBytes;return r[o>>>5]|=128<<24-o%32,r[14+(o+64>>>9<<4)]=t.floor(n/4294967296),r[15+(o+64>>>9<<4)]=n,e.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=i._createHelper(l),e.HmacSHA256=i._createHmacHelper(l)}(Math),r.SHA256)}(ws);var Ps=u(ws.exports),Os=function(t){return r=function(e,r){return r===function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var o=n-1;return void 0!==r&&(o=q(r),o=r<0?uo(n+o,0):co(o,n-1)),function(t,e,r,n){for(var o=t.length,i=r+(n?1:-1);n?i--:++i<o;)if(e(t[i],i,t))return i;return-1}(t,Jn(e),o,!0)}(t,(function(t){return e.token===t.token&&e.value===t.value}))},(T(e=t)?Ve:to)(e,Jn(r));var e,r},_s=function(t){return t.model.moveProps.length>0},xs=function(t,e){var r=t.getPath().filter((function(t){return _s(t)})).length;return e&&(r+=e.getPath().filter((function(t){return _s(t)})).length),r},Rs=function(t,e,r){void 0===e&&(e=[]),void 0===r&&(r=[]);var n="r";e.length>0&&(n="m"),r.length>0&&(n="s");var o="".concat(n);e.length>0&&(o+="".concat(e[0].token).concat(e[0].value));var i=o;return t&&(i=t.getPath().map((function(t){return t.model.id})).join("=>")+"=>"+o),Ps(i).toString().slice(0,6)},Es=function(t){var e="B"===t[0]?1:-1,r=/\[(.*)\]/.exec(t);if(r){var n=r[1];return{x:ho.indexOf(n[0]),y:ho.indexOf(n[1]),ki:e}}return{x:-1,y:-1,ki:0}},Ts=function(t,e){if(void 0===e&&(e=0),0===e)return t;var r=en(t),n=ho.indexOf(t[2])-e;return r.substr(0,2)+ho[n]+r.substr(3)},Is=function(t,e){var r="B"===t.currentPlayer?1:-1;return Math.round((e.scoreLead-t.scoreLead)*r*1e3)/1e3},Ms=function(t,e){var r="B"===t.currentPlayer?1:-1;return Math.round((e.winrate-t.winrate)*r*1e3*100)/1e3},Cs=function(t,e){return{id:t,name:t,number:e||0,rootProps:[],moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}},ks=function(t,e,r){var o=new y,i=fs.from(t),a=Rs(e,[i]),u=1;e&&(u=xs(e)+1);var c=Cs(a,u);return c.moveProps=[i],c.nodeAnnotationProps=[ss.from("N[".concat(a,"]"))],o.parse(n(n({},c),r))},Bs=function(t,e,r){var n=(t-2*e)/r;return{space:n,scaledPadding:e+n/2}},Ns=19,Fs=0,Ds=[],Us=function(t,e){void 0===e&&(e=19);for(var r=e-1,n=0,o=e-1,i=0,a=0;a<t.length;a++)for(var u=0;u<t[a].length;u++){0!==t[a][u]&&(r>a&&(r=a),n<a&&(n=a),o>u&&(o=u),i<u&&(i=u))}return{leftMost:r,rightMost:n,topMost:o,bottomMost:i}},Ls=function(e,r){void 0===r&&(r=19);var n=Us(e,r),o=n.leftMost,i=n.rightMost,a=n.topMost<r-1-n.bottomMost,u=o<r-1-i;return a&&u?t.Center.TopLeft:!a&&u?t.Center.BottomLeft:a&&!u?t.Center.TopRight:a||u?t.Center.Center:t.Center.BottomRight},Ws=function(e,r,n){void 0===r&&(r=19),void 0===n&&(n=2);var o=[19,19],i=Ls(e),a=Us(e,r),u=a.leftMost,c=a.rightMost,f=a.topMost,l=a.bottomMost;return i===t.Center.TopLeft&&(o[0]=c+n+1,o[1]=l+n+1),i===t.Center.TopRight&&(o[0]=r-u+n,o[1]=l+n+1),i===t.Center.BottomLeft&&(o[0]=c+n+1,o[1]=r-f+n),i===t.Center.BottomRight&&(o[0]=r-u+n,o[1]=r-f+n),o},$s=function(e,r,n){void 0===r&&(r=19),void 0===n&&(n=19);var o=19-r,i=19-n,a=o,u=i;switch(Ls(e)){case t.Center.TopLeft:a=0,u=-i;break;case t.Center.TopRight:a=o,u=-i;break;case t.Center.BottomLeft:a=0,u=0;break;case t.Center.BottomRight:a=o,u=0}return{x:a,y:u}},Gs=function(e,r,n){void 0===r&&(r=19),void 0===n&&(n=2);var o=Ls(e),i=Us(e,r),a=i.leftMost,u=i.rightMost,c=i.topMost,f=i.bottomMost,l=[[0,18],[0,18]],s=r-1;return o===t.Center.TopLeft?l=[[0,s=Math.min(Math.max(u,f)+n,r-1)],[0,s]]:o===t.Center.TopRight?l=[[r-1-(s=Math.min(Math.max(f+n,r-1-(a-n)),r-1)),18],[0,s]]:o===t.Center.BottomLeft?l=[[0,s=Math.min(Math.max(r-1-(c-n),u+n),r-1)],[r-1-s,18]]:o===t.Center.BottomRight&&(l=[[r-1-(s=Math.min(Math.max(r-1-(c-n),r-1-(a-n)),r-1)),18],[r-1-s,18]]),{visibleArea:l,center:o}};function zs(t,e,r,n){e>=0&&e<Ns&&r>=0&&r<Ns&&(t[e][r]!==n||Ds.includes("".concat(e,",").concat(r))?0===t[e][r]&&(Fs+=1):(Ds.push("".concat(e,",").concat(r)),zs(t,e-1,r,n),zs(t,e+1,r,n),zs(t,e,r-1,n),zs(t,e,r+1,n)))}function Vs(t,e,r,n){return Fs=0,Ds=[],e<0||r<0||e>Ns-1||r>Ns-1||0===t[e][r]?{liberty:4,recursionPath:[]}:(zs(t,e,r,n),{liberty:Fs,recursionPath:Ds})}function Hs(t,e,r,n){var o=on(t),i=Vs(t,e,r-1,n),a=i.liberty,u=i.recursionPath,c=Vs(t,e,r+1,n),f=c.liberty,l=c.recursionPath,s=Vs(t,e-1,r,n),p=s.liberty,y=s.recursionPath,h=Vs(t,e+1,r,n),d=h.liberty,g=h.recursionPath;return 0===a&&u.forEach((function(t){var e=t.split(",");o[parseInt(e[0],10)][parseInt(e[1],10)]=0})),0===f&&l.forEach((function(t){var e=t.split(",");o[parseInt(e[0],10)][parseInt(e[1],10)]=0})),0===p&&y.forEach((function(t){var e=t.split(",");o[parseInt(e[0],10)][parseInt(e[1],10)]=0})),0===d&&g.forEach((function(t){var e=t.split(",");o[parseInt(e[0],10)][parseInt(e[1],10)]=0})),o}function qs(t,e,r,n){var o=Vs(t,e,r-1,n),i=o.liberty,a=o.recursionPath,u=Vs(t,e,r+1,n),c=u.liberty,f=u.recursionPath,l=Vs(t,e-1,r,n),s=l.liberty,p=l.recursionPath,y=Vs(t,e+1,r,n),h=y.liberty,d=y.recursionPath;return 0===i&&a.length>0||(0===c&&f.length>0||(0===s&&p.length>0||0===h&&d.length>0))}function Ks(t,e,r,n){if(e<0||r<0)return!0;if(e>18||r>18)return!0;var o=on(t);if(0!==o[e][r])return!1;o[e][r]=n;var i=Vs(o,e,r,n).liberty;return!!qs(o,e,r,-n)||!qs(o,e,r,n)&&0!==i}var Js=function(){function t(){this.NEW_NODE=";",this.BRANCHING=["(",")"],this.PROPERTY=["[","]"],this.LIST_IDENTITIES=["AW","AB","AE","AR","CR","DD","LB","LN","MA","SL","SQ","TR","VW","TB","TW"],this.NODE_DELIMITERS=[this.NEW_NODE].concat(this.BRANCHING),this.tree=new y,this.root=null,this.node=null,this.currentNode=null,this.parentNode=null,this.nodeProps=new Map,this.sgf=""}return t.prototype.fromRoot=function(t){return this.root=t,this},t.prototype.nodeToString=function(t){var e=this,r="";return t.walk((function(t){var n=t.model,a=n.rootProps,u=n.moveProps,c=n.customProps,f=n.setupProps,l=n.markupProps,s=n.nodeAnnotationProps,p=n.moveAnnotationProps,y=n.gameInfoProps,h=function(t){for(var e=-1,r=null==t?0:t.length,n=0,o=[];++e<r;){var i=t[e];i&&(o[n++]=i)}return o}(i(i(i(i(i(i(i(i([],o(a),!1),o(c),!1),o(u),!1),o(Os(f)),!1),o(Os(l)),!1),o(y),!1),o(s),!1),o(p),!1));return r+=";",h.forEach((function(t){r+=t.toString()})),t.children.length>1&&t.children.forEach((function(t){r+="(".concat(e.nodeToString(t),")")})),t.children.length<2})),r},t.prototype.toSgf=function(){return"(".concat(this.nodeToString(this.root),")")},t.prototype.toSgfWithoutAnalysis=function(){return function(){var t=arguments,e=xe(t[0]);return t.length<3?e:e.replace(t[1],t[2])}("(".concat(this.nodeToString(this.root),")"),/](A\[.*?\])/g,"]")},t.prototype.parse=function(t){if(t)for(var e=0,r=0,n=[],a=function(a){var c=t[a];if(u.NODE_DELIMITERS.includes(c)){var f=t.slice(e,a);if(""!==f){var l=[],s=[],p=[],y=[],h=[],d=[],g=[],v=[],b=i([],o(Yl(f,RegExp(/[A-Z]+(\[[\s\S]*?\]){1,}/,"g"))),!1);if(b.forEach((function(t){var e=t[0].match(/([A-Z]+)\[/);if(e){var r=e[1];Ql.includes(r)&&l.push(fs.from(t[0])),ts.includes(r)&&s.push(ls.from(t[0])),os.includes(r)&&p.push(ds.from(t[0])),ns.includes(r)&&y.push(hs.from(t[0])),is.includes(r)&&h.push(gs.from(t[0])),es.includes(r)&&d.push(ss.from(t[0])),rs.includes(r)&&g.push(ps.from(t[0])),as.includes(r)&&v.push(vs.from(t[0]))}})),b.length>0){var m=Rs(u.currentNode,l,s),w=u.tree.parse({id:m,name:m,index:r,number:0,moveProps:l,setupProps:s,rootProps:p,markupProps:y,gameInfoProps:h,nodeAnnotationProps:d,moveAnnotationProps:g,customProps:v});u.currentNode?(u.currentNode.addChild(w),w.model.number=xs(w),w.model.children=[w]):(u.root=w,u.parentNode=w),u.currentNode=w,r+=1}}}("("===c&&u.currentNode&&n.push(u.currentNode),")"===c&&n.length>0)&&((w=n.pop())&&(u.currentNode=w));u.NODE_DELIMITERS.includes(c)&&(e=a)},u=this,c=0;c<t.length;c++)a(c)},t}(),Zs=new y,Xs=["FF[4]","GM[1]","CA[UTF-8]","AP[ghostgo:0.1.0]","SZ[19]","ST[0]"].map((function(t){return ds.from(t)}));return t.A1_LETTERS=po,t.A1_LETTERS_WITH_I=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"],t.A1_NUMBERS=yo,t.AnnotationProp=ys,t.BLANK_ARRAY=go,t.CUSTOM_PROP_LIST=as,t.CustomProp=vs,t.DEFAULT_OPTIONS=vo,t.DOT_SIZE=3,t.EXPAND_H=5,t.EXPAND_V=5,t.GAME_INFO_PROP_LIST=is,t.GRID=19,t.GameInfoProp=gs,t.LIST_OF_POINTS_PROP=["AB","AE","AW"],t.MARKUP_PROP_LIST=ns,t.MISCELLANEOUS_PROP_LIST=["FG","PM","VW"],t.MOVE_ANNOTATION_PROP_LIST=rs,t.MOVE_PROP_LIST=Ql,t.MarkupProp=hs,t.MiscellaneousProp=ms,t.MoveAnnotationProp=ps,t.MoveProp=fs,t.NODE_ANNOTATION_PROP_LIST=es,t.NodeAnnotationProp=ss,t.RESOURCES=bo,t.RESPONSE_TIME=100,t.ROOT_PROP_LIST=os,t.RootProp=ds,t.SETUP_PROP_LIST=ts,t.SGF_LETTERS=ho,t.SetupProp=ls,t.Sgf=Js,t.SgfPropBase=cs,t.TIMING_PROP_LIST=["BL","OB","OW","WL"],t.TimingProp=bs,t.a1ToIndex=function(t,e){return void 0===e&&(e=19),po.indexOf(t[0])*e+yo.indexOf(parseInt(t.substr(1),0))},t.a1ToPos=function(t){return{x:po.indexOf(t[0]),y:yo.indexOf(parseInt(t.substr(1),0))}},t.a1ToSGF=function(t,e,r,n){if(void 0===e&&(e="B"),void 0===r&&(r=0),void 0===n&&(n=0),"pass"===t)return"".concat(e,"[]");var o=po.indexOf(t[0])+r,i=yo.indexOf(parseInt(t.substr(1),0))+n;return"".concat(e,"[").concat(ho[o]).concat(ho[i],"]")},t.buildMoveNode=ks,t.calcBoardSize=Ws,t.calcCenter=Ls,t.calcDoubtfulMovesThresholdRange=function(t){return t>=25?{evil:{winrateRange:[-1,-.15],scoreRange:[-100,-3]},bad:{winrateRange:[-.15,-.1],scoreRange:[-3,-2]},poor:{winrateRange:[-.1,-.05],scoreRange:[-2,-1]},ok:{winrateRange:[-.05,-.02],scoreRange:[-1,-.5]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=23&&t<25?{evil:{winrateRange:[-1,-.2],scoreRange:[-100,-8]},bad:{winrateRange:[-.2,-.15],scoreRange:[-8,-4]},poor:{winrateRange:[-.15,-.05],scoreRange:[-4,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=20&&t<23?{evil:{winrateRange:[-1,-.25],scoreRange:[-100,-12]},bad:{winrateRange:[-.25,-.1],scoreRange:[-12,-5]},poor:{winrateRange:[-.1,-.05],scoreRange:[-5,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=18&&t<20?{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-15]},bad:{winrateRange:[-.3,-.1],scoreRange:[-15,-7]},poor:{winrateRange:[-.1,-.05],scoreRange:[-7,-5]},ok:{winrateRange:[-.05,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=13&&t<18?{evil:{winrateRange:[-1,-.35],scoreRange:[-100,-20]},bad:{winrateRange:[-.35,-.12],scoreRange:[-20,-10]},poor:{winrateRange:[-.12,-.08],scoreRange:[-10,-5]},ok:{winrateRange:[-.08,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=8&&t<13?{evil:{winrateRange:[-1,-.4],scoreRange:[-100,-25]},bad:{winrateRange:[-.4,-.15],scoreRange:[-25,-10]},poor:{winrateRange:[-.15,-.1],scoreRange:[-10,-5]},ok:{winrateRange:[-.1,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=0&&t<8?{evil:{winrateRange:[-1,-.45],scoreRange:[-100,-35]},bad:{winrateRange:[-.45,-.2],scoreRange:[-35,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-30]},bad:{winrateRange:[-.3,-.2],scoreRange:[-30,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}},t.calcMost=Us,t.calcOffset=function(e){var r=Ws(e),n=19-r[0],o=19-r[1],i=n,a=o;switch(Ls(e)){case t.Center.TopLeft:i=0,a=o;break;case t.Center.TopRight:i=-n,a=o;break;case t.Center.BottomLeft:i=0,a=0;break;case t.Center.BottomRight:i=-n,a=0}return{x:i,y:a}},t.calcPartialArea=function(t,e){void 0===e&&(e=2);var r=Us(t),n=r.leftMost,o=r.rightMost,i=r.topMost,a=r.bottomMost;return[[n-e<0?0:n-e,i-e<0?0:i-e],[o+e>18?18:o+e,a+e>18?18:a+e]]},t.calcSHA=Rs,t.calcScoreDiff=Is,t.calcScoreDiffText=function(t,e,r,n){if(void 0===r&&(r=1),void 0===n&&(n=!1),!t||!e)return"";var o=Is(t,e);n&&(o=-o);var i=o.toFixed(r);return o>0?"+".concat(i):"".concat(i)},t.calcSpaceAndScaledPadding=Bs,t.calcTransform=function(e,r,n){var o=n.boardSize,i=n.extend,a=n.padding,u=n.zoom,c=Gs(r,o,i),f=c.visibleArea,l=c.center,s=u?f:[[0,18],[0,18]],p=s[0][1]-s[0][0]+1,y=Bs(e,a,o).space,h=e/(p*y+a),d={x:0,y:0,width:e/h,height:e/h};if(!u||0===s[0][0]&&18===s[0][1]&&0===s[1][0]&&18===s[1][1])return{va:s,scale:1,translateX:0,translateY:0,center:l,clip:d,space:y,transform:[]};var g=0,v=0,b=a*h;switch(l){case t.Center.TopLeft:break;case t.Center.TopRight:d.x=e-e/h,g=s[0][0]*y*h+b;break;case t.Center.BottomLeft:d.y=e-e/h,v=s[1][0]*y*h+b;break;case t.Center.BottomRight:d.x=e-e/h,d.y=e-e/h,g=s[0][0]*y*h+b,v=s[1][0]*y*h+b}return{va:s,scale:h,translateX:-g,translateY:-v,center:l,clip:d,space:y,transform:[{translateX:-g},{translateY:-v},{scale:h}]}},t.calcVisibleArea=Gs,t.calcWinrateDiff=Ms,t.calcWinrateDiffText=function(t,e,r,n){if(void 0===r&&(r=1),void 0===n&&(n=!1),!t||!e)return"";var o=Ms(t,e);n&&(o=-o);var i=o.toFixed(r);return o>=0?"+".concat(i,"%"):"".concat(i,"%")},t.canMove=Ks,t.convertStepsForAI=function(t,e){void 0===e&&(e=0);var r=en(t);r=r.map((function(t){return Ts(t,e)}));var n="(;FF[4]GM[1]SZ[".concat(19-e,"]GN[226]PB[Black]HA[0]PW[White]KM[7.5]DT[2017-08-01]TM[1800]RU[Chinese]CP[Copyright ghost-go.com]AP[ghost-go.com]PL[Black];"),o=0,i="";return t.forEach((function(t,e){t[0]===i[0]&&("B"===t[0]?(r.splice(e+o,0,"W[tt]"),o+=1):(r.splice(e+o,0,"B[tt]"),o+=1)),i=t})),"".concat(n).concat(r.join(";"),")")},t.convertStoneTypeToString=function(t){return 1===t?"B":"W"},t.cutMoveNodes=function(t,e){for(var r=on(t);r&&r.hasChildren()&&0===r.model.moveProps.length;)(r=r.children[0]).children=[];if(e)for(;r&&r.parent&&!r.isRoot();)r=r.parent;return r},t.empty=function(t){return new Array(t[0]).fill("").map((function(){return new Array(t[1]).fill("")}))},t.extractAnswerKind=function(e){var r=e.model.customProps.find((function(t){return"PAT"===t.token})),n=e.model.customProps.find((function(t){return"PAI"===t.token}));if(n){var o=JSON.parse(n.value);return{r:t.ProblemAnswerType.Right,v:t.ProblemAnswerType.Variant,w:t.ProblemAnswerType.Wrong}[o.kind]}return null==r?void 0:r.value},t.extractPAI=function(t){var e=t.model.customProps.find((function(t){return"PAI"===t.token}));if(e)return JSON.parse(e.value)},t.extractPI=function(t){var e=t.model.customProps.find((function(t){return"PI"===t.token}));if(e)return JSON.parse(e.value)},t.getDeduplicatedProps=Os,t.getIndexFromAnalysis=function(t){return/indexes/.test(t.id)?JSON.parse(t.id).indexes[0]:""},t.getLastIndex=function(t){var e=t;return t.walk((function(t){return e=t,!0})),e.model.index},t.getNodeNumber=xs,t.handleMove=function(e,r,n,o,i,a){if(o!==t.Ki.Empty)if(Ks(e,r,n,o)){var u=ho[r]+ho[n],c=o===t.Ki.Black?"B":"W",f=Rs(i,[fs.from("".concat(c,"[").concat(u,"]"))]),l=i.children.filter((function(t){return t.model.id===f})),s=void 0;l.length>0?s=l[0]:(s=ks("".concat(c,"[").concat(u,"]"),i),i.addChild(s)),a&&a(s,!0)}else a&&a(i,!1)},t.initNodeData=Cs,t.initialRoot=function(){return Zs.parse({id:"root",name:0,index:0,number:0,rootProps:Xs,moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]})},t.isAnswerNode=function(e,r){var n,o,i,a=null===(o=e.model.customProps)||void 0===o?void 0:o.find((function(t){return"PAI"===t.token})),u=null===(i=e.model.customProps)||void 0===i?void 0:i.find((function(t){return"PAT"===t.token}));if(!a&&!u)return!1;if(a){var c=JSON.parse(a.value),f=((n={})[t.ProblemAnswerType.Right]="r",n[t.ProblemAnswerType.Variant]="v",n[t.ProblemAnswerType.Wrong]="w",n);return(null==c?void 0:c.kind)===f[r]}return console.log("vvv",u.value,r),(null==u?void 0:u.value)===r},t.isMainPath=function(t){return 0===((e=t.getPath().map((function(t){return t.getIndex()})))&&e.length?function(t,e){for(var r,n=-1,o=t.length;++n<o;){var i=e(t[n]);void 0!==i&&(r=void 0===r?i:r+i)}return r}(e,K):0);var e},t.isMoveNode=_s,t.isRooNode=function(t){return t.model.moveProps.length>0},t.isSetupNode=function(t){return t.model.setupProps.length>0},t.matToListOfTuples=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0);for(var n=[],o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=po[o+e],c=yo[i+r],f=1===a?"B":"W";n.push([f,u+c])}}return n},t.matToPosition=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0);for(var n="",o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=po[o+e],c=yo[i+r];n+="".concat(1===a?"b":"w"," ").concat(u).concat(c," ")}}return n},t.move=function(t,e,r,n){if(e<0||r<0)return t;var o=on(t);return o[e][r]=n,Hs(o,e,r,-n)},t.nFormatter=function(t,e){void 0===e&&(e=1);var r=[{value:1,symbol:""},{value:1e3,symbol:"k"},{value:1e6,symbol:"M"},{value:1e9,symbol:"G"},{value:1e12,symbol:"T"},{value:1e15,symbol:"P"},{value:1e18,symbol:"E"}].slice().reverse().find((function(e){return t>=e.value}));return r?(t/r.value).toFixed(e).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")+r.symbol:"0"},t.pathToAiMoves=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=0),t.filter((function(t){return t.model.moveProps.length>0})).map((function(t){var n=t.model.moveProps[0],o=po[ho.indexOf(n.value[0])+e],i=yo[ho.indexOf(n.value[1])+r];return[n.token,o+i]}))},t.pathToIndexes=function(t){return t.map((function(t){return t.model.id}))},t.pathToInitialStones=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=0),fo(t.filter((function(t){return t.model.setupProps.length>0})).map((function(t){return t.model.setupProps.map((function(t){return t.values.map((function(n){var o=po[ho.indexOf(n[0])+e],i=yo[ho.indexOf(n[1])+r];return["AB"===t.token?"B":"W",o+i]}))}))}))[0],1)},t.posToSgf=function(t,e,r){var n=ho[t],o=ho[e];return 0===r?"":1===r?"B[".concat(n).concat(o,"]"):-1===r?"W[".concat(n).concat(o,"]"):""},t.reverseOffset=$s,t.reverseOffsetA1Move=function(t,e,r){if("pass"===t)return t;var n=JSON.parse(r.id),o=$s(e,n.bx,n.by),i=o.x,a=o.y,u=po.indexOf(t[0])+i,c=yo.indexOf(parseInt(t.substr(1),0))+a;return"".concat(po[u]).concat(yo[c])},t.round2=function(t,e,r){return void 0===e&&(e=1),void 0===r&&(r=2),(Math.round(100*t)/100*e).toFixed(r)},t.round3=function(t,e,r){return void 0===e&&(e=1),void 0===r&&(r=3),(Math.round(1e3*t)/1e3*e).toFixed(r)},t.sgfOffset=Ts,t.sgfToA1=function(t){var e=Es(t),r=e.x,n=e.y;return po[r]+yo[n]},t.sgfToPos=Es,t.showKi=function(t,e,r){void 0===r&&(r=!0);var n=on(t),o=!1;return e.forEach((function(t){var e=Es(t),i=e.x,a=e.y,u=e.ki;r?Ks(n,i,a,u)&&(n[i][a]=u,n=Hs(n,i,a,-u),o=!0):(n[i][a]=u,o=!0)})),{arrangement:n,hasMoved:o}},t.zeros=function(t){return new Array(t[0]).fill(0).map((function(){return new Array(t[1]).fill(0)}))},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
